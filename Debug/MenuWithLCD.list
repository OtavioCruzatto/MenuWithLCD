
MenuWithLCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e7c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004040  08004040  00014040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004078  08004078  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004080  08004080  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004084  08004084  00014084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004088  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  20000070  080040f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080040f8  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba32  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afd  00000000  00000000  0002bad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002e078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022123  00000000  00000000  0002ea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca5f  00000000  00000000  00050b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cffaa  00000000  00000000  0005d5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d574  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  0012d5c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000070 	.word	0x20000070
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004028 	.word	0x08004028

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000074 	.word	0x20000074
 8000200:	08004028 	.word	0x08004028

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b974 	b.w	8000514 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468e      	mov	lr, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	d14d      	bne.n	80002ee <__udivmoddi4+0xaa>
 8000252:	428a      	cmp	r2, r1
 8000254:	4694      	mov	ip, r2
 8000256:	d969      	bls.n	800032c <__udivmoddi4+0xe8>
 8000258:	fab2 f282 	clz	r2, r2
 800025c:	b152      	cbz	r2, 8000274 <__udivmoddi4+0x30>
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	f1c2 0120 	rsb	r1, r2, #32
 8000266:	fa20 f101 	lsr.w	r1, r0, r1
 800026a:	fa0c fc02 	lsl.w	ip, ip, r2
 800026e:	ea41 0e03 	orr.w	lr, r1, r3
 8000272:	4094      	lsls	r4, r2
 8000274:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000278:	0c21      	lsrs	r1, r4, #16
 800027a:	fbbe f6f8 	udiv	r6, lr, r8
 800027e:	fa1f f78c 	uxth.w	r7, ip
 8000282:	fb08 e316 	mls	r3, r8, r6, lr
 8000286:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028a:	fb06 f107 	mul.w	r1, r6, r7
 800028e:	4299      	cmp	r1, r3
 8000290:	d90a      	bls.n	80002a8 <__udivmoddi4+0x64>
 8000292:	eb1c 0303 	adds.w	r3, ip, r3
 8000296:	f106 30ff 	add.w	r0, r6, #4294967295
 800029a:	f080 811f 	bcs.w	80004dc <__udivmoddi4+0x298>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 811c 	bls.w	80004dc <__udivmoddi4+0x298>
 80002a4:	3e02      	subs	r6, #2
 80002a6:	4463      	add	r3, ip
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b0:	fb08 3310 	mls	r3, r8, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 f707 	mul.w	r7, r0, r7
 80002bc:	42a7      	cmp	r7, r4
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x92>
 80002c0:	eb1c 0404 	adds.w	r4, ip, r4
 80002c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c8:	f080 810a 	bcs.w	80004e0 <__udivmoddi4+0x29c>
 80002cc:	42a7      	cmp	r7, r4
 80002ce:	f240 8107 	bls.w	80004e0 <__udivmoddi4+0x29c>
 80002d2:	4464      	add	r4, ip
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	1be4      	subs	r4, r4, r7
 80002dc:	2600      	movs	r6, #0
 80002de:	b11d      	cbz	r5, 80002e8 <__udivmoddi4+0xa4>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c5 4300 	strd	r4, r3, [r5]
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xc2>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	f000 80ef 	beq.w	80004d6 <__udivmoddi4+0x292>
 80002f8:	2600      	movs	r6, #0
 80002fa:	e9c5 0100 	strd	r0, r1, [r5]
 80002fe:	4630      	mov	r0, r6
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f683 	clz	r6, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d14a      	bne.n	80003a4 <__udivmoddi4+0x160>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd4>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80f9 	bhi.w	800050a <__udivmoddi4+0x2c6>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	469e      	mov	lr, r3
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa4>
 8000326:	e9c5 4e00 	strd	r4, lr, [r5]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa4>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xec>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 8092 	bne.w	800045e <__udivmoddi4+0x21a>
 800033a:	eba1 010c 	sub.w	r1, r1, ip
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f fe8c 	uxth.w	lr, ip
 8000346:	2601      	movs	r6, #1
 8000348:	0c20      	lsrs	r0, r4, #16
 800034a:	fbb1 f3f7 	udiv	r3, r1, r7
 800034e:	fb07 1113 	mls	r1, r7, r3, r1
 8000352:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000356:	fb0e f003 	mul.w	r0, lr, r3
 800035a:	4288      	cmp	r0, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0x12c>
 800035e:	eb1c 0101 	adds.w	r1, ip, r1
 8000362:	f103 38ff 	add.w	r8, r3, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x12a>
 8000368:	4288      	cmp	r0, r1
 800036a:	f200 80cb 	bhi.w	8000504 <__udivmoddi4+0x2c0>
 800036e:	4643      	mov	r3, r8
 8000370:	1a09      	subs	r1, r1, r0
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb1 f0f7 	udiv	r0, r1, r7
 8000378:	fb07 1110 	mls	r1, r7, r0, r1
 800037c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000380:	fb0e fe00 	mul.w	lr, lr, r0
 8000384:	45a6      	cmp	lr, r4
 8000386:	d908      	bls.n	800039a <__udivmoddi4+0x156>
 8000388:	eb1c 0404 	adds.w	r4, ip, r4
 800038c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000390:	d202      	bcs.n	8000398 <__udivmoddi4+0x154>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f200 80bb 	bhi.w	800050e <__udivmoddi4+0x2ca>
 8000398:	4608      	mov	r0, r1
 800039a:	eba4 040e 	sub.w	r4, r4, lr
 800039e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a2:	e79c      	b.n	80002de <__udivmoddi4+0x9a>
 80003a4:	f1c6 0720 	rsb	r7, r6, #32
 80003a8:	40b3      	lsls	r3, r6
 80003aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b2:	fa20 f407 	lsr.w	r4, r0, r7
 80003b6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ba:	431c      	orrs	r4, r3
 80003bc:	40f9      	lsrs	r1, r7
 80003be:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c2:	fa00 f306 	lsl.w	r3, r0, r6
 80003c6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ca:	0c20      	lsrs	r0, r4, #16
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	fb09 1118 	mls	r1, r9, r8, r1
 80003d4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d8:	fb08 f00e 	mul.w	r0, r8, lr
 80003dc:	4288      	cmp	r0, r1
 80003de:	fa02 f206 	lsl.w	r2, r2, r6
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x1b8>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ec:	f080 8088 	bcs.w	8000500 <__udivmoddi4+0x2bc>
 80003f0:	4288      	cmp	r0, r1
 80003f2:	f240 8085 	bls.w	8000500 <__udivmoddi4+0x2bc>
 80003f6:	f1a8 0802 	sub.w	r8, r8, #2
 80003fa:	4461      	add	r1, ip
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f9 	udiv	r0, r1, r9
 8000404:	fb09 1110 	mls	r1, r9, r0, r1
 8000408:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800040c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000410:	458e      	cmp	lr, r1
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1e2>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f100 34ff 	add.w	r4, r0, #4294967295
 800041c:	d26c      	bcs.n	80004f8 <__udivmoddi4+0x2b4>
 800041e:	458e      	cmp	lr, r1
 8000420:	d96a      	bls.n	80004f8 <__udivmoddi4+0x2b4>
 8000422:	3802      	subs	r0, #2
 8000424:	4461      	add	r1, ip
 8000426:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042a:	fba0 9402 	umull	r9, r4, r0, r2
 800042e:	eba1 010e 	sub.w	r1, r1, lr
 8000432:	42a1      	cmp	r1, r4
 8000434:	46c8      	mov	r8, r9
 8000436:	46a6      	mov	lr, r4
 8000438:	d356      	bcc.n	80004e8 <__udivmoddi4+0x2a4>
 800043a:	d053      	beq.n	80004e4 <__udivmoddi4+0x2a0>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x212>
 800043e:	ebb3 0208 	subs.w	r2, r3, r8
 8000442:	eb61 010e 	sbc.w	r1, r1, lr
 8000446:	fa01 f707 	lsl.w	r7, r1, r7
 800044a:	fa22 f306 	lsr.w	r3, r2, r6
 800044e:	40f1      	lsrs	r1, r6
 8000450:	431f      	orrs	r7, r3
 8000452:	e9c5 7100 	strd	r7, r1, [r5]
 8000456:	2600      	movs	r6, #0
 8000458:	4631      	mov	r1, r6
 800045a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045e:	f1c2 0320 	rsb	r3, r2, #32
 8000462:	40d8      	lsrs	r0, r3
 8000464:	fa0c fc02 	lsl.w	ip, ip, r2
 8000468:	fa21 f303 	lsr.w	r3, r1, r3
 800046c:	4091      	lsls	r1, r2
 800046e:	4301      	orrs	r1, r0
 8000470:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000474:	fa1f fe8c 	uxth.w	lr, ip
 8000478:	fbb3 f0f7 	udiv	r0, r3, r7
 800047c:	fb07 3610 	mls	r6, r7, r0, r3
 8000480:	0c0b      	lsrs	r3, r1, #16
 8000482:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000486:	fb00 f60e 	mul.w	r6, r0, lr
 800048a:	429e      	cmp	r6, r3
 800048c:	fa04 f402 	lsl.w	r4, r4, r2
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x260>
 8000492:	eb1c 0303 	adds.w	r3, ip, r3
 8000496:	f100 38ff 	add.w	r8, r0, #4294967295
 800049a:	d22f      	bcs.n	80004fc <__udivmoddi4+0x2b8>
 800049c:	429e      	cmp	r6, r3
 800049e:	d92d      	bls.n	80004fc <__udivmoddi4+0x2b8>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4463      	add	r3, ip
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	b289      	uxth	r1, r1
 80004a8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004ac:	fb07 3316 	mls	r3, r7, r6, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb06 f30e 	mul.w	r3, r6, lr
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x28a>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c4:	d216      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d914      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 80004ca:	3e02      	subs	r6, #2
 80004cc:	4461      	add	r1, ip
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d4:	e738      	b.n	8000348 <__udivmoddi4+0x104>
 80004d6:	462e      	mov	r6, r5
 80004d8:	4628      	mov	r0, r5
 80004da:	e705      	b.n	80002e8 <__udivmoddi4+0xa4>
 80004dc:	4606      	mov	r6, r0
 80004de:	e6e3      	b.n	80002a8 <__udivmoddi4+0x64>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6f8      	b.n	80002d6 <__udivmoddi4+0x92>
 80004e4:	454b      	cmp	r3, r9
 80004e6:	d2a9      	bcs.n	800043c <__udivmoddi4+0x1f8>
 80004e8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ec:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f0:	3801      	subs	r0, #1
 80004f2:	e7a3      	b.n	800043c <__udivmoddi4+0x1f8>
 80004f4:	4646      	mov	r6, r8
 80004f6:	e7ea      	b.n	80004ce <__udivmoddi4+0x28a>
 80004f8:	4620      	mov	r0, r4
 80004fa:	e794      	b.n	8000426 <__udivmoddi4+0x1e2>
 80004fc:	4640      	mov	r0, r8
 80004fe:	e7d1      	b.n	80004a4 <__udivmoddi4+0x260>
 8000500:	46d0      	mov	r8, sl
 8000502:	e77b      	b.n	80003fc <__udivmoddi4+0x1b8>
 8000504:	3b02      	subs	r3, #2
 8000506:	4461      	add	r1, ip
 8000508:	e732      	b.n	8000370 <__udivmoddi4+0x12c>
 800050a:	4630      	mov	r0, r6
 800050c:	e709      	b.n	8000322 <__udivmoddi4+0xde>
 800050e:	4464      	add	r4, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e742      	b.n	800039a <__udivmoddi4+0x156>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <HAL_TIM_PeriodElapsedCallback>:

/*
 * Timer interrupt handling (10us)
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	if(htim == &htim9)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a0c      	ldr	r2, [pc, #48]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d111      	bne.n	800054c <HAL_TIM_PeriodElapsedCallback+0x34>
	{
		if(lcdControllerGetDelayStatus(&lcd) == TRUE)
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800052a:	f003 fbf3 	bl	8003d14 <lcdControllerGetDelayStatus>
 800052e:	4603      	mov	r3, r0
 8000530:	2b01      	cmp	r3, #1
 8000532:	d102      	bne.n	800053a <HAL_TIM_PeriodElapsedCallback+0x22>
		{
			lcdControllerIncrementDelayCounter(&lcd);
 8000534:	4808      	ldr	r0, [pc, #32]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000536:	f003 fbfa 	bl	8003d2e <lcdControllerIncrementDelayCounter>
		}

		if(lcdControllerGetEnableDelayStatus(&lcd) == TRUE)
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800053c:	f003 fc08 	bl	8003d50 <lcdControllerGetEnableDelayStatus>
 8000540:	4603      	mov	r3, r0
 8000542:	2b01      	cmp	r3, #1
 8000544:	d102      	bne.n	800054c <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			lcdControllerIncrementEnableDelayCounter(&lcd);
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000548:	f003 fc0f 	bl	8003d6a <lcdControllerIncrementEnableDelayCounter>
		}
	}
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000d4 	.word	0x200000d4
 8000558:	2000011c 	.word	0x2000011c

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b090      	sub	sp, #64	; 0x40
 8000560:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fbf5 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f941 	bl	80007ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 fa3b 	bl	80009e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800056e:	f000 f9a9 	bl	80008c4 <MX_TIM2_Init>
  MX_TIM9_Init();
 8000572:	f000 f9ff 	bl	8000974 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  pushButtonInit(&upPushButton, BTN_UP_GPIO_Port, BTN_UP_Pin, NORMALLY_LOW, 400, 3000);
 8000576:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800057a:	9301      	str	r3, [sp, #4]
 800057c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000588:	4987      	ldr	r1, [pc, #540]	; (80007a8 <main+0x24c>)
 800058a:	4888      	ldr	r0, [pc, #544]	; (80007ac <main+0x250>)
 800058c:	f003 fc0b 	bl	8003da6 <pushButtonInit>
  pushButtonInit(&downPushButton, BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, NORMALLY_LOW, 400, 3000);
 8000590:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000594:	9301      	str	r3, [sp, #4]
 8000596:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a2:	4981      	ldr	r1, [pc, #516]	; (80007a8 <main+0x24c>)
 80005a4:	4882      	ldr	r0, [pc, #520]	; (80007b0 <main+0x254>)
 80005a6:	f003 fbfe 	bl	8003da6 <pushButtonInit>
  pushButtonInit(&enterPushButton, BTN_ENTER_GPIO_Port, BTN_ENTER_Pin, NORMALLY_LOW, 3000, 15000);
 80005aa:	f643 2398 	movw	r3, #15000	; 0x3a98
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	2240      	movs	r2, #64	; 0x40
 80005ba:	497e      	ldr	r1, [pc, #504]	; (80007b4 <main+0x258>)
 80005bc:	487e      	ldr	r0, [pc, #504]	; (80007b8 <main+0x25c>)
 80005be:	f003 fbf2 	bl	8003da6 <pushButtonInit>
  pushButtonInit(&escPushButton, BTN_ESC_GPIO_Port, BTN_ESC_Pin, NORMALLY_LOW, 3000, 15000);
 80005c2:	f643 2398 	movw	r3, #15000	; 0x3a98
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	4978      	ldr	r1, [pc, #480]	; (80007b4 <main+0x258>)
 80005d4:	4879      	ldr	r0, [pc, #484]	; (80007bc <main+0x260>)
 80005d6:	f003 fbe6 	bl	8003da6 <pushButtonInit>

  lcdControllerInitStruct(&lcd,
 80005da:	2300      	movs	r3, #0
 80005dc:	930e      	str	r3, [sp, #56]	; 0x38
 80005de:	4b78      	ldr	r3, [pc, #480]	; (80007c0 <main+0x264>)
 80005e0:	930d      	str	r3, [sp, #52]	; 0x34
 80005e2:	2302      	movs	r3, #2
 80005e4:	930c      	str	r3, [sp, #48]	; 0x30
 80005e6:	4b77      	ldr	r3, [pc, #476]	; (80007c4 <main+0x268>)
 80005e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80005ea:	2320      	movs	r3, #32
 80005ec:	930a      	str	r3, [sp, #40]	; 0x28
 80005ee:	4b6e      	ldr	r3, [pc, #440]	; (80007a8 <main+0x24c>)
 80005f0:	9309      	str	r3, [sp, #36]	; 0x24
 80005f2:	2310      	movs	r3, #16
 80005f4:	9308      	str	r3, [sp, #32]
 80005f6:	4b6c      	ldr	r3, [pc, #432]	; (80007a8 <main+0x24c>)
 80005f8:	9307      	str	r3, [sp, #28]
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	9306      	str	r3, [sp, #24]
 8000600:	4b69      	ldr	r3, [pc, #420]	; (80007a8 <main+0x24c>)
 8000602:	9305      	str	r3, [sp, #20]
 8000604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000608:	9304      	str	r3, [sp, #16]
 800060a:	4b6a      	ldr	r3, [pc, #424]	; (80007b4 <main+0x258>)
 800060c:	9303      	str	r3, [sp, #12]
 800060e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000612:	9302      	str	r3, [sp, #8]
 8000614:	4b67      	ldr	r3, [pc, #412]	; (80007b4 <main+0x258>)
 8000616:	9301      	str	r3, [sp, #4]
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	4b69      	ldr	r3, [pc, #420]	; (80007c4 <main+0x268>)
 800061e:	2240      	movs	r2, #64	; 0x40
 8000620:	4961      	ldr	r1, [pc, #388]	; (80007a8 <main+0x24c>)
 8000622:	4869      	ldr	r0, [pc, #420]	; (80007c8 <main+0x26c>)
 8000624:	f002 fe22 	bl	800326c <lcdControllerInitStruct>
		  LCD_DB6_GPIO_Port, LCD_DB6_Pin,
		  LCD_DB7_GPIO_Port, LCD_DB7_Pin,
		  LCD_ON_OFF_GPIO_Port, LCD_ON_OFF_Pin,
		  &htim2, TIM_CHANNEL_1);

  HAL_Delay(250);
 8000628:	20fa      	movs	r0, #250	; 0xfa
 800062a:	f000 fc03 	bl	8000e34 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062e:	2100      	movs	r1, #0
 8000630:	4863      	ldr	r0, [pc, #396]	; (80007c0 <main+0x264>)
 8000632:	f001 fd39 	bl	80020a8 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim9);
 8000636:	4865      	ldr	r0, [pc, #404]	; (80007cc <main+0x270>)
 8000638:	f001 fc76 	bl	8001f28 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(lcdControllerIsInitialized(&lcd) == FALSE)
 800063c:	4862      	ldr	r0, [pc, #392]	; (80007c8 <main+0x26c>)
 800063e:	f003 fba5 	bl	8003d8c <lcdControllerIsInitialized>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d103      	bne.n	8000650 <main+0xf4>
	  {
		  lcdControllerInit(&lcd);
 8000648:	485f      	ldr	r0, [pc, #380]	; (80007c8 <main+0x26c>)
 800064a:	f002 fee5 	bl	8003418 <lcdControllerInit>
		  continue;
 800064e:	e0a9      	b.n	80007a4 <main+0x248>
	  }

	  pushButtonState = pushButtonReadSingleAndContinuousPress(&upPushButton);
 8000650:	4856      	ldr	r0, [pc, #344]	; (80007ac <main+0x250>)
 8000652:	f003 fc8d 	bl	8003f70 <pushButtonReadSingleAndContinuousPress>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b5d      	ldr	r3, [pc, #372]	; (80007d0 <main+0x274>)
 800065c:	701a      	strb	r2, [r3, #0]
	  if(pushButtonState == PRESSED)
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <main+0x274>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b01      	cmp	r3, #1
 8000664:	d10c      	bne.n	8000680 <main+0x124>
	  {
		  currentScreen += 1;
 8000666:	4b5b      	ldr	r3, [pc, #364]	; (80007d4 <main+0x278>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	b2da      	uxtb	r2, r3
 800066e:	4b59      	ldr	r3, [pc, #356]	; (80007d4 <main+0x278>)
 8000670:	701a      	strb	r2, [r3, #0]
		  if(currentScreen > 4)
 8000672:	4b58      	ldr	r3, [pc, #352]	; (80007d4 <main+0x278>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b04      	cmp	r3, #4
 8000678:	d902      	bls.n	8000680 <main+0x124>
		  {
			  currentScreen = 4;
 800067a:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <main+0x278>)
 800067c:	2204      	movs	r2, #4
 800067e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  pushButtonState = pushButtonReadSingleAndContinuousPress(&downPushButton);
 8000680:	484b      	ldr	r0, [pc, #300]	; (80007b0 <main+0x254>)
 8000682:	f003 fc75 	bl	8003f70 <pushButtonReadSingleAndContinuousPress>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b51      	ldr	r3, [pc, #324]	; (80007d0 <main+0x274>)
 800068c:	701a      	strb	r2, [r3, #0]
	  if(pushButtonState == PRESSED)
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <main+0x274>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d105      	bne.n	80006a2 <main+0x146>
	  {
		  currentScreen -= 1;
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <main+0x278>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	3b01      	subs	r3, #1
 800069c:	b2da      	uxtb	r2, r3
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x278>)
 80006a0:	701a      	strb	r2, [r3, #0]
		  {
			  currentScreen = 0;
		  }
	  }

	  switch (currentScreen)
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <main+0x278>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b04      	cmp	r3, #4
 80006a8:	d875      	bhi.n	8000796 <main+0x23a>
 80006aa:	a201      	add	r2, pc, #4	; (adr r2, 80006b0 <main+0x154>)
 80006ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b0:	080006c5 	.word	0x080006c5
 80006b4:	080006ef 	.word	0x080006ef
 80006b8:	08000719 	.word	0x08000719
 80006bc:	08000743 	.word	0x08000743
 80006c0:	0800076d 	.word	0x0800076d
	  {
		  case 0:
			  lcdControllerSetString(&lcd, ROW_0, screen_0);
 80006c4:	4a44      	ldr	r2, [pc, #272]	; (80007d8 <main+0x27c>)
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	483f      	ldr	r0, [pc, #252]	; (80007c8 <main+0x26c>)
 80006ca:	f003 fa80 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_1, screen_0);
 80006ce:	4a42      	ldr	r2, [pc, #264]	; (80007d8 <main+0x27c>)
 80006d0:	21c0      	movs	r1, #192	; 0xc0
 80006d2:	483d      	ldr	r0, [pc, #244]	; (80007c8 <main+0x26c>)
 80006d4:	f003 fa7b 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_2, screen_0);
 80006d8:	4a3f      	ldr	r2, [pc, #252]	; (80007d8 <main+0x27c>)
 80006da:	2190      	movs	r1, #144	; 0x90
 80006dc:	483a      	ldr	r0, [pc, #232]	; (80007c8 <main+0x26c>)
 80006de:	f003 fa76 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_3, screen_0);
 80006e2:	4a3d      	ldr	r2, [pc, #244]	; (80007d8 <main+0x27c>)
 80006e4:	21d0      	movs	r1, #208	; 0xd0
 80006e6:	4838      	ldr	r0, [pc, #224]	; (80007c8 <main+0x26c>)
 80006e8:	f003 fa71 	bl	8003bce <lcdControllerSetString>
			  break;
 80006ec:	e057      	b.n	800079e <main+0x242>

		  case 1:
			  lcdControllerSetString(&lcd, ROW_0, screen_1);
 80006ee:	4a3b      	ldr	r2, [pc, #236]	; (80007dc <main+0x280>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	4835      	ldr	r0, [pc, #212]	; (80007c8 <main+0x26c>)
 80006f4:	f003 fa6b 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_1, screen_1);
 80006f8:	4a38      	ldr	r2, [pc, #224]	; (80007dc <main+0x280>)
 80006fa:	21c0      	movs	r1, #192	; 0xc0
 80006fc:	4832      	ldr	r0, [pc, #200]	; (80007c8 <main+0x26c>)
 80006fe:	f003 fa66 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_2, screen_1);
 8000702:	4a36      	ldr	r2, [pc, #216]	; (80007dc <main+0x280>)
 8000704:	2190      	movs	r1, #144	; 0x90
 8000706:	4830      	ldr	r0, [pc, #192]	; (80007c8 <main+0x26c>)
 8000708:	f003 fa61 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_3, screen_1);
 800070c:	4a33      	ldr	r2, [pc, #204]	; (80007dc <main+0x280>)
 800070e:	21d0      	movs	r1, #208	; 0xd0
 8000710:	482d      	ldr	r0, [pc, #180]	; (80007c8 <main+0x26c>)
 8000712:	f003 fa5c 	bl	8003bce <lcdControllerSetString>
			  break;
 8000716:	e042      	b.n	800079e <main+0x242>

		  case 2:
			  lcdControllerSetString(&lcd, ROW_0, screen_2);
 8000718:	4a31      	ldr	r2, [pc, #196]	; (80007e0 <main+0x284>)
 800071a:	2180      	movs	r1, #128	; 0x80
 800071c:	482a      	ldr	r0, [pc, #168]	; (80007c8 <main+0x26c>)
 800071e:	f003 fa56 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_1, screen_2);
 8000722:	4a2f      	ldr	r2, [pc, #188]	; (80007e0 <main+0x284>)
 8000724:	21c0      	movs	r1, #192	; 0xc0
 8000726:	4828      	ldr	r0, [pc, #160]	; (80007c8 <main+0x26c>)
 8000728:	f003 fa51 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_2, screen_2);
 800072c:	4a2c      	ldr	r2, [pc, #176]	; (80007e0 <main+0x284>)
 800072e:	2190      	movs	r1, #144	; 0x90
 8000730:	4825      	ldr	r0, [pc, #148]	; (80007c8 <main+0x26c>)
 8000732:	f003 fa4c 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_3, screen_2);
 8000736:	4a2a      	ldr	r2, [pc, #168]	; (80007e0 <main+0x284>)
 8000738:	21d0      	movs	r1, #208	; 0xd0
 800073a:	4823      	ldr	r0, [pc, #140]	; (80007c8 <main+0x26c>)
 800073c:	f003 fa47 	bl	8003bce <lcdControllerSetString>
			  break;
 8000740:	e02d      	b.n	800079e <main+0x242>

		  case 3:
			  lcdControllerSetString(&lcd, ROW_0, screen_3);
 8000742:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <main+0x288>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	4820      	ldr	r0, [pc, #128]	; (80007c8 <main+0x26c>)
 8000748:	f003 fa41 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_1, screen_3);
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <main+0x288>)
 800074e:	21c0      	movs	r1, #192	; 0xc0
 8000750:	481d      	ldr	r0, [pc, #116]	; (80007c8 <main+0x26c>)
 8000752:	f003 fa3c 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_2, screen_3);
 8000756:	4a23      	ldr	r2, [pc, #140]	; (80007e4 <main+0x288>)
 8000758:	2190      	movs	r1, #144	; 0x90
 800075a:	481b      	ldr	r0, [pc, #108]	; (80007c8 <main+0x26c>)
 800075c:	f003 fa37 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_3, screen_3);
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <main+0x288>)
 8000762:	21d0      	movs	r1, #208	; 0xd0
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <main+0x26c>)
 8000766:	f003 fa32 	bl	8003bce <lcdControllerSetString>
			  break;
 800076a:	e018      	b.n	800079e <main+0x242>

		  case 4:
			  lcdControllerSetString(&lcd, ROW_0, screen_4);
 800076c:	4a1e      	ldr	r2, [pc, #120]	; (80007e8 <main+0x28c>)
 800076e:	2180      	movs	r1, #128	; 0x80
 8000770:	4815      	ldr	r0, [pc, #84]	; (80007c8 <main+0x26c>)
 8000772:	f003 fa2c 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_1, screen_4);
 8000776:	4a1c      	ldr	r2, [pc, #112]	; (80007e8 <main+0x28c>)
 8000778:	21c0      	movs	r1, #192	; 0xc0
 800077a:	4813      	ldr	r0, [pc, #76]	; (80007c8 <main+0x26c>)
 800077c:	f003 fa27 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_2, screen_4);
 8000780:	4a19      	ldr	r2, [pc, #100]	; (80007e8 <main+0x28c>)
 8000782:	2190      	movs	r1, #144	; 0x90
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <main+0x26c>)
 8000786:	f003 fa22 	bl	8003bce <lcdControllerSetString>
			  lcdControllerSetString(&lcd, ROW_3, screen_4);
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <main+0x28c>)
 800078c:	21d0      	movs	r1, #208	; 0xd0
 800078e:	480e      	ldr	r0, [pc, #56]	; (80007c8 <main+0x26c>)
 8000790:	f003 fa1d 	bl	8003bce <lcdControllerSetString>
			  break;
 8000794:	e003      	b.n	800079e <main+0x242>

		  default:
			  currentScreen = 0;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <main+0x278>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
			  break;
 800079c:	bf00      	nop
	  }

	  lcdControllerUpdate(&lcd);
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <main+0x26c>)
 80007a0:	f003 f912 	bl	80039c8 <lcdControllerUpdate>
	  if(lcdControllerIsInitialized(&lcd) == FALSE)
 80007a4:	e74a      	b.n	800063c <main+0xe0>
 80007a6:	bf00      	nop
 80007a8:	40020400 	.word	0x40020400
 80007ac:	20000204 	.word	0x20000204
 80007b0:	20000218 	.word	0x20000218
 80007b4:	40020000 	.word	0x40020000
 80007b8:	2000022c 	.word	0x2000022c
 80007bc:	20000240 	.word	0x20000240
 80007c0:	2000008c 	.word	0x2000008c
 80007c4:	40020800 	.word	0x40020800
 80007c8:	2000011c 	.word	0x2000011c
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	20000254 	.word	0x20000254
 80007d4:	20000255 	.word	0x20000255
 80007d8:	20000000 	.word	0x20000000
 80007dc:	20000014 	.word	0x20000014
 80007e0:	20000028 	.word	0x20000028
 80007e4:	2000003c 	.word	0x2000003c
 80007e8:	20000050 	.word	0x20000050

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	2234      	movs	r2, #52	; 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fbf8 	bl	8003ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 0308 	add.w	r3, r7, #8
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b29      	ldr	r3, [pc, #164]	; (80008bc <SystemClock_Config+0xd0>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a28      	ldr	r2, [pc, #160]	; (80008bc <SystemClock_Config+0xd0>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b26      	ldr	r3, [pc, #152]	; (80008bc <SystemClock_Config+0xd0>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800082c:	2300      	movs	r3, #0
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	4b23      	ldr	r3, [pc, #140]	; (80008c0 <SystemClock_Config+0xd4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a21      	ldr	r2, [pc, #132]	; (80008c0 <SystemClock_Config+0xd4>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1f      	ldr	r3, [pc, #124]	; (80008c0 <SystemClock_Config+0xd4>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	2301      	movs	r3, #1
 8000852:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000854:	2310      	movs	r3, #16
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000858:	2302      	movs	r3, #2
 800085a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085c:	2300      	movs	r3, #0
 800085e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000860:	2308      	movs	r3, #8
 8000862:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000864:	2350      	movs	r3, #80	; 0x50
 8000866:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800086c:	2302      	movs	r3, #2
 800086e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000874:	f107 031c 	add.w	r3, r7, #28
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f867 	bl	800194c <HAL_RCC_OscConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000884:	f000 f946 	bl	8000b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000888:	230f      	movs	r3, #15
 800088a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088c:	2302      	movs	r3, #2
 800088e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000890:	2380      	movs	r3, #128	; 0x80
 8000892:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fdc2 	bl	800142c <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ae:	f000 f931 	bl	8000b14 <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	; 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40007000 	.word	0x40007000

080008c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <MX_TIM2_Init+0xac>)
 80008e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 40-1;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_TIM2_Init+0xac>)
 80008f0:	2227      	movs	r2, #39	; 0x27
 80008f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM2_Init+0xac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM2_Init+0xac>)
 80008fc:	2232      	movs	r2, #50	; 0x32
 80008fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM2_Init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM2_Init+0xac>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800090c:	4818      	ldr	r0, [pc, #96]	; (8000970 <MX_TIM2_Init+0xac>)
 800090e:	f001 fb7b 	bl	8002008 <HAL_TIM_PWM_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000918:	f000 f8fc 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000924:	f107 0320 	add.w	r3, r7, #32
 8000928:	4619      	mov	r1, r3
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <MX_TIM2_Init+0xac>)
 800092c:	f002 fa4e 	bl	8002dcc <HAL_TIMEx_MasterConfigSynchronization>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8000936:	f000 f8ed 	bl	8000b14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093a:	2360      	movs	r3, #96	; 0x60
 800093c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800093e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000942:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	4619      	mov	r1, r3
 8000952:	4807      	ldr	r0, [pc, #28]	; (8000970 <MX_TIM2_Init+0xac>)
 8000954:	f001 fd78 	bl	8002448 <HAL_TIM_PWM_ConfigChannel>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800095e:	f000 f8d9 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <MX_TIM2_Init+0xac>)
 8000964:	f000 f94c 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000008c 	.word	0x2000008c

08000974 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_TIM9_Init+0x68>)
 8000988:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MX_TIM9_Init+0x6c>)
 800098a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 5-1;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_TIM9_Init+0x68>)
 800098e:	2204      	movs	r2, #4
 8000990:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_TIM9_Init+0x68>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 80;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_TIM9_Init+0x68>)
 800099a:	2250      	movs	r2, #80	; 0x50
 800099c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_TIM9_Init+0x68>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <MX_TIM9_Init+0x68>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_TIM9_Init+0x68>)
 80009ac:	f001 fa6c 	bl	8001e88 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f8ad 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009be:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_TIM9_Init+0x68>)
 80009c6:	f001 fe01 	bl	80025cc <HAL_TIM_ConfigClockSource>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 f8a0 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000d4 	.word	0x200000d4
 80009e0:	40014000 	.word	0x40014000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a40      	ldr	r2, [pc, #256]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b33      	ldr	r3, [pc, #204]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a32      	ldr	r2, [pc, #200]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <MX_GPIO_Init+0x120>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_ON_OFF_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2182      	movs	r1, #130	; 0x82
 8000a52:	482d      	ldr	r0, [pc, #180]	; (8000b08 <MX_GPIO_Init+0x124>)
 8000a54:	f000 fcd0 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|LCD_RS_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8000a5e:	482b      	ldr	r0, [pc, #172]	; (8000b0c <MX_GPIO_Init+0x128>)
 8000a60:	f000 fcca 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DB4_Pin|LCD_EN_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000a6a:	4829      	ldr	r0, [pc, #164]	; (8000b10 <MX_GPIO_Init+0x12c>)
 8000a6c:	f000 fcc4 	bl	80013f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_ON_OFF_Pin LCD_RW_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin|LCD_RW_Pin;
 8000a70:	2382      	movs	r3, #130	; 0x82
 8000a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4619      	mov	r1, r3
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <MX_GPIO_Init+0x124>)
 8000a88:	f000 fb0a 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_ENTER_Pin BTN_ESC_Pin */
  GPIO_InitStruct.Pin = BTN_ENTER_Pin|BTN_ESC_Pin;
 8000a8c:	23c0      	movs	r3, #192	; 0xc0
 8000a8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	481c      	ldr	r0, [pc, #112]	; (8000b10 <MX_GPIO_Init+0x12c>)
 8000aa0:	f000 fafe 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin LCD_RS_Pin */
  GPIO_InitStruct.Pin = LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin|LCD_RS_Pin;
 8000aa4:	f44f 638e 	mov.w	r3, #1136	; 0x470
 8000aa8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4619      	mov	r1, r3
 8000abc:	4813      	ldr	r0, [pc, #76]	; (8000b0c <MX_GPIO_Init+0x128>)
 8000abe:	f000 faef 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DB4_Pin LCD_EN_Pin */
  GPIO_InitStruct.Pin = LCD_DB4_Pin|LCD_EN_Pin;
 8000ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_GPIO_Init+0x12c>)
 8000adc:	f000 fae0 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_DOWN_Pin;
 8000ae0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ae4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_GPIO_Init+0x128>)
 8000af6:	f000 fad3 	bl	80010a0 <HAL_GPIO_Init>

}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020800 	.word	0x40020800
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020000 	.word	0x40020000

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	4a0f      	ldr	r2, [pc, #60]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6453      	str	r3, [r2, #68]	; 0x44
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x4c>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b80:	d10d      	bne.n	8000b9e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_TIM_PWM_MspInit+0x3c>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_TIM_PWM_MspInit+0x3c>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_TIM_PWM_MspInit+0x3c>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_TIM_Base_MspInit+0x48>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d115      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2018      	movs	r0, #24
 8000be4:	f000 fa25 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000be8:	2018      	movs	r0, #24
 8000bea:	f000 fa3e 	bl	800106a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40014000 	.word	0x40014000
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c20:	d11d      	bne.n	8000c5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_TIM_MspPostInit+0x68>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_TIM_MspPostInit+0x68>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_TIM_MspPostInit+0x68>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <HAL_TIM_MspPostInit+0x6c>)
 8000c5a:	f000 fa21 	bl	80010a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f89a 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000cca:	f001 fab5 	bl	8002238 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	200000d4 	.word	0x200000d4

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f003 f93d 	bl	8003fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fc15 	bl	800055c <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	08004088 	.word	0x08004088
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	2000025c 	.word	0x2000025c

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f94f 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fecc 	bl	8000b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f967 	bl	8001086 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f92f 	bl	8001032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000064 	.word	0x20000064
 8000dec:	2000006c 	.word	0x2000006c
 8000df0:	20000068 	.word	0x20000068

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	2000006c 	.word	0x2000006c
 8000e18:	20000258 	.word	0x20000258

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000258 	.word	0x20000258

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000006c 	.word	0x2000006c

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001044:	f7ff ff3e 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	6978      	ldr	r0, [r7, #20]
 8001050:	f7ff ff8e 	bl	8000f70 <NVIC_EncodePriority>
 8001054:	4602      	mov	r2, r0
 8001056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105a:	4611      	mov	r1, r2
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff5d 	bl	8000f1c <__NVIC_SetPriority>
}
 8001062:	bf00      	nop
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff31 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffa2 	bl	8000fd8 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	e165      	b.n	8001388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010bc:	2201      	movs	r2, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	f040 8154 	bne.w	8001382 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d005      	beq.n	80010f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d130      	bne.n	8001154 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68da      	ldr	r2, [r3, #12]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	091b      	lsrs	r3, r3, #4
 800113e:	f003 0201 	and.w	r2, r3, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	2b03      	cmp	r3, #3
 800115e:	d017      	beq.n	8001190 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d123      	bne.n	80011e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	08da      	lsrs	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3208      	adds	r2, #8
 80011a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	220f      	movs	r2, #15
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	691a      	ldr	r2, [r3, #16]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	08da      	lsrs	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3208      	adds	r2, #8
 80011de:	69b9      	ldr	r1, [r7, #24]
 80011e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0203 	and.w	r2, r3, #3
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 80ae 	beq.w	8001382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	4b5d      	ldr	r3, [pc, #372]	; (80013a0 <HAL_GPIO_Init+0x300>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122e:	4a5c      	ldr	r2, [pc, #368]	; (80013a0 <HAL_GPIO_Init+0x300>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001234:	6453      	str	r3, [r2, #68]	; 0x44
 8001236:	4b5a      	ldr	r3, [pc, #360]	; (80013a0 <HAL_GPIO_Init+0x300>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001242:	4a58      	ldr	r2, [pc, #352]	; (80013a4 <HAL_GPIO_Init+0x304>)
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3302      	adds	r3, #2
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4f      	ldr	r2, [pc, #316]	; (80013a8 <HAL_GPIO_Init+0x308>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d025      	beq.n	80012ba <HAL_GPIO_Init+0x21a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a4e      	ldr	r2, [pc, #312]	; (80013ac <HAL_GPIO_Init+0x30c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01f      	beq.n	80012b6 <HAL_GPIO_Init+0x216>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a4d      	ldr	r2, [pc, #308]	; (80013b0 <HAL_GPIO_Init+0x310>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d019      	beq.n	80012b2 <HAL_GPIO_Init+0x212>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a4c      	ldr	r2, [pc, #304]	; (80013b4 <HAL_GPIO_Init+0x314>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d013      	beq.n	80012ae <HAL_GPIO_Init+0x20e>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a4b      	ldr	r2, [pc, #300]	; (80013b8 <HAL_GPIO_Init+0x318>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d00d      	beq.n	80012aa <HAL_GPIO_Init+0x20a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a4a      	ldr	r2, [pc, #296]	; (80013bc <HAL_GPIO_Init+0x31c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d007      	beq.n	80012a6 <HAL_GPIO_Init+0x206>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a49      	ldr	r2, [pc, #292]	; (80013c0 <HAL_GPIO_Init+0x320>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_GPIO_Init+0x202>
 800129e:	2306      	movs	r3, #6
 80012a0:	e00c      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012a2:	2307      	movs	r3, #7
 80012a4:	e00a      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012a6:	2305      	movs	r3, #5
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012aa:	2304      	movs	r3, #4
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x21c>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x304>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <HAL_GPIO_Init+0x324>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a26      	ldr	r2, [pc, #152]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_GPIO_Init+0x324>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_GPIO_Init+0x324>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f ae96 	bls.w	80010bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40021800 	.word	0x40021800
 80013c4:	40013c00 	.word	0x40013c00

080013c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	691a      	ldr	r2, [r3, #16]
 80013d8:	887b      	ldrh	r3, [r7, #2]
 80013da:	4013      	ands	r3, r2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	460b      	mov	r3, r1
 8001402:	807b      	strh	r3, [r7, #2]
 8001404:	4613      	mov	r3, r2
 8001406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001408:	787b      	ldrb	r3, [r7, #1]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800140e:	887a      	ldrh	r2, [r7, #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001414:	e003      	b.n	800141e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	041a      	lsls	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0cc      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b68      	ldr	r3, [pc, #416]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d90c      	bls.n	8001468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b65      	ldr	r3, [pc, #404]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a58      	ldr	r2, [pc, #352]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800148a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d044      	beq.n	800154c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d119      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3b      	ldr	r3, [pc, #236]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e067      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4934      	ldr	r1, [pc, #208]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fc7e 	bl	8000e1c <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff fc7a 	bl	8000e1c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d20c      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	; (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fbde 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08004068 	.word	0x08004068
 80015f0:	20000064 	.word	0x20000064
 80015f4:	20000068 	.word	0x20000068

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015fc:	b0a6      	sub	sp, #152	; 0x98
 80015fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8001606:	2300      	movs	r3, #0
 8001608:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800161e:	4bc8      	ldr	r3, [pc, #800]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b0c      	cmp	r3, #12
 8001628:	f200 817e 	bhi.w	8001928 <HAL_RCC_GetSysClockFreq+0x330>
 800162c:	a201      	add	r2, pc, #4	; (adr r2, 8001634 <HAL_RCC_GetSysClockFreq+0x3c>)
 800162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001632:	bf00      	nop
 8001634:	08001669 	.word	0x08001669
 8001638:	08001929 	.word	0x08001929
 800163c:	08001929 	.word	0x08001929
 8001640:	08001929 	.word	0x08001929
 8001644:	08001671 	.word	0x08001671
 8001648:	08001929 	.word	0x08001929
 800164c:	08001929 	.word	0x08001929
 8001650:	08001929 	.word	0x08001929
 8001654:	08001679 	.word	0x08001679
 8001658:	08001929 	.word	0x08001929
 800165c:	08001929 	.word	0x08001929
 8001660:	08001929 	.word	0x08001929
 8001664:	080017e3 	.word	0x080017e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001668:	4bb6      	ldr	r3, [pc, #728]	; (8001944 <HAL_RCC_GetSysClockFreq+0x34c>)
 800166a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800166e:	e15f      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001670:	4bb5      	ldr	r3, [pc, #724]	; (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 8001672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001676:	e15b      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001678:	4bb1      	ldr	r3, [pc, #708]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001684:	4bae      	ldr	r3, [pc, #696]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d031      	beq.n	80016f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001690:	4bab      	ldr	r3, [pc, #684]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	2200      	movs	r2, #0
 8001698:	66bb      	str	r3, [r7, #104]	; 0x68
 800169a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800169c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a2:	663b      	str	r3, [r7, #96]	; 0x60
 80016a4:	2300      	movs	r3, #0
 80016a6:	667b      	str	r3, [r7, #100]	; 0x64
 80016a8:	4ba7      	ldr	r3, [pc, #668]	; (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 80016aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80016ae:	462a      	mov	r2, r5
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	2300      	movs	r3, #0
 80016b6:	4621      	mov	r1, r4
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	4aa2      	ldr	r2, [pc, #648]	; (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 80016c0:	4621      	mov	r1, r4
 80016c2:	fba1 1202 	umull	r1, r2, r1, r2
 80016c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80016c8:	460a      	mov	r2, r1
 80016ca:	67ba      	str	r2, [r7, #120]	; 0x78
 80016cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016ce:	4413      	add	r3, r2
 80016d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016d6:	2200      	movs	r2, #0
 80016d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80016da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80016dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80016e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016e4:	f7fe fd96 	bl	8000214 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80016f2:	e064      	b.n	80017be <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f4:	4b92      	ldr	r3, [pc, #584]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	099b      	lsrs	r3, r3, #6
 80016fa:	2200      	movs	r2, #0
 80016fc:	653b      	str	r3, [r7, #80]	; 0x50
 80016fe:	657a      	str	r2, [r7, #84]	; 0x54
 8001700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001706:	64bb      	str	r3, [r7, #72]	; 0x48
 8001708:	2300      	movs	r3, #0
 800170a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800170c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001710:	4622      	mov	r2, r4
 8001712:	462b      	mov	r3, r5
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	0159      	lsls	r1, r3, #5
 800171e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001722:	0150      	lsls	r0, r2, #5
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4621      	mov	r1, r4
 800172a:	1a51      	subs	r1, r2, r1
 800172c:	6139      	str	r1, [r7, #16]
 800172e:	4629      	mov	r1, r5
 8001730:	eb63 0301 	sbc.w	r3, r3, r1
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001742:	4659      	mov	r1, fp
 8001744:	018b      	lsls	r3, r1, #6
 8001746:	4651      	mov	r1, sl
 8001748:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800174c:	4651      	mov	r1, sl
 800174e:	018a      	lsls	r2, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ebb2 0801 	subs.w	r8, r2, r1
 8001756:	4659      	mov	r1, fp
 8001758:	eb63 0901 	sbc.w	r9, r3, r1
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001768:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800176c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001770:	4690      	mov	r8, r2
 8001772:	4699      	mov	r9, r3
 8001774:	4623      	mov	r3, r4
 8001776:	eb18 0303 	adds.w	r3, r8, r3
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	462b      	mov	r3, r5
 800177e:	eb49 0303 	adc.w	r3, r9, r3
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001790:	4629      	mov	r1, r5
 8001792:	028b      	lsls	r3, r1, #10
 8001794:	4621      	mov	r1, r4
 8001796:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179a:	4621      	mov	r1, r4
 800179c:	028a      	lsls	r2, r1, #10
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017a6:	2200      	movs	r2, #0
 80017a8:	643b      	str	r3, [r7, #64]	; 0x40
 80017aa:	647a      	str	r2, [r7, #68]	; 0x44
 80017ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80017b0:	f7fe fd30 	bl	8000214 <__aeabi_uldivmod>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4613      	mov	r3, r2
 80017ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017be:	4b60      	ldr	r3, [pc, #384]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	0c1b      	lsrs	r3, r3, #16
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	3301      	adds	r3, #1
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80017d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80017d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017e0:	e0a6      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017e2:	4b57      	ldr	r3, [pc, #348]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ee:	4b54      	ldr	r3, [pc, #336]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d02a      	beq.n	8001850 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017fa:	4b51      	ldr	r3, [pc, #324]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	099b      	lsrs	r3, r3, #6
 8001800:	2200      	movs	r2, #0
 8001802:	63bb      	str	r3, [r7, #56]	; 0x38
 8001804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800180c:	2100      	movs	r1, #0
 800180e:	4b4e      	ldr	r3, [pc, #312]	; (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 8001810:	fb03 f201 	mul.w	r2, r3, r1
 8001814:	2300      	movs	r3, #0
 8001816:	fb00 f303 	mul.w	r3, r0, r3
 800181a:	4413      	add	r3, r2
 800181c:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_RCC_GetSysClockFreq+0x350>)
 800181e:	fba0 1202 	umull	r1, r2, r0, r2
 8001822:	677a      	str	r2, [r7, #116]	; 0x74
 8001824:	460a      	mov	r2, r1
 8001826:	673a      	str	r2, [r7, #112]	; 0x70
 8001828:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800182a:	4413      	add	r3, r2
 800182c:	677b      	str	r3, [r7, #116]	; 0x74
 800182e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001832:	2200      	movs	r2, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	637a      	str	r2, [r7, #52]	; 0x34
 8001838:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800183c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001840:	f7fe fce8 	bl	8000214 <__aeabi_uldivmod>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4613      	mov	r3, r2
 800184a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800184e:	e05b      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001850:	4b3b      	ldr	r3, [pc, #236]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	099b      	lsrs	r3, r3, #6
 8001856:	2200      	movs	r2, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
 800185a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800186c:	4642      	mov	r2, r8
 800186e:	464b      	mov	r3, r9
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	0159      	lsls	r1, r3, #5
 800187a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187e:	0150      	lsls	r0, r2, #5
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4641      	mov	r1, r8
 8001886:	ebb2 0a01 	subs.w	sl, r2, r1
 800188a:	4649      	mov	r1, r9
 800188c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001890:	f04f 0200 	mov.w	r2, #0
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800189c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018a4:	ebb2 040a 	subs.w	r4, r2, sl
 80018a8:	eb63 050b 	sbc.w	r5, r3, fp
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	00eb      	lsls	r3, r5, #3
 80018b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ba:	00e2      	lsls	r2, r4, #3
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	4643      	mov	r3, r8
 80018c2:	18e3      	adds	r3, r4, r3
 80018c4:	603b      	str	r3, [r7, #0]
 80018c6:	464b      	mov	r3, r9
 80018c8:	eb45 0303 	adc.w	r3, r5, r3
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018da:	4629      	mov	r1, r5
 80018dc:	028b      	lsls	r3, r1, #10
 80018de:	4621      	mov	r1, r4
 80018e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e4:	4621      	mov	r1, r4
 80018e6:	028a      	lsls	r2, r1, #10
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80018f0:	2200      	movs	r2, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	61fa      	str	r2, [r7, #28]
 80018f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018fa:	f7fe fc8b 	bl	8000214 <__aeabi_uldivmod>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4613      	mov	r3, r2
 8001904:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <HAL_RCC_GetSysClockFreq+0x348>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	0f1b      	lsrs	r3, r3, #28
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001916:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800191a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001926:	e003      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_RCC_GetSysClockFreq+0x34c>)
 800192a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800192e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001930:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001934:	4618      	mov	r0, r3
 8001936:	3798      	adds	r7, #152	; 0x98
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	017d7840 	.word	0x017d7840

0800194c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e28d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8083 	beq.w	8001a72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800196c:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001978:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001980:	2b08      	cmp	r3, #8
 8001982:	d106      	bne.n	8001992 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001984:	4b8e      	ldr	r3, [pc, #568]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b8b      	ldr	r3, [pc, #556]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b88      	ldr	r3, [pc, #544]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x124>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e25a      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x90>
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7b      	ldr	r2, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xb4>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6b      	ldr	r2, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9fc 	bl	8000e1c <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f9f8 	bl	8000e1c <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e21f      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xdc>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9e8 	bl	8000e1c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9e4 	bl	8000e1c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e20b      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x104>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d06f      	beq.n	8001b5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d017      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d105      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00b      	beq.n	8001aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d11c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aae:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d116      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e1d3      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	e03a      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d020      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af0:	4b34      	ldr	r3, [pc, #208]	; (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f991 	bl	8000e1c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001afe:	f7ff f98d 	bl	8000e1c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e1b4      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0f0      	beq.n	8001afe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b28      	ldr	r3, [pc, #160]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4925      	ldr	r1, [pc, #148]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	600b      	str	r3, [r1, #0]
 8001b30:	e015      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b32:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_RCC_OscConfig+0x278>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff f970 	bl	8000e1c <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b40:	f7ff f96c 	bl	8000e1c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e193      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b52:	4b1b      	ldr	r3, [pc, #108]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d1f0      	bne.n	8001b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d036      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d016      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f950 	bl	8000e1c <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff f94c 	bl	8000e1c <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e173      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x274>)
 8001b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x234>
 8001b9e:	e01b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba0:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f939 	bl	8000e1c <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00e      	b.n	8001bcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff f935 	bl	8000e1c <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d907      	bls.n	8001bcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e15c      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	42470000 	.word	0x42470000
 8001bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b8a      	ldr	r3, [pc, #552]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ea      	bne.n	8001bae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8097 	beq.w	8001d14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bea:	4b83      	ldr	r3, [pc, #524]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b7f      	ldr	r3, [pc, #508]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a7e      	ldr	r2, [pc, #504]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b7c      	ldr	r3, [pc, #496]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c12:	2301      	movs	r3, #1
 8001c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c16:	4b79      	ldr	r3, [pc, #484]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d118      	bne.n	8001c54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c22:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a75      	ldr	r2, [pc, #468]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8f5 	bl	8000e1c <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c36:	f7ff f8f1 	bl	8000e1c <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e118      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	4b6c      	ldr	r3, [pc, #432]	; (8001dfc <HAL_RCC_OscConfig+0x4b0>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCC_OscConfig+0x31e>
 8001c5c:	4b66      	ldr	r3, [pc, #408]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c60:	4a65      	ldr	r2, [pc, #404]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6713      	str	r3, [r2, #112]	; 0x70
 8001c68:	e01c      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x340>
 8001c72:	4b61      	ldr	r3, [pc, #388]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7e:	4b5e      	ldr	r3, [pc, #376]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c82:	4a5d      	ldr	r2, [pc, #372]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c8c:	4b5a      	ldr	r3, [pc, #360]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a59      	ldr	r2, [pc, #356]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c92:	f023 0301 	bic.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001c9e:	f023 0304 	bic.w	r3, r3, #4
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d015      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cac:	f7ff f8b6 	bl	8000e1c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f8b2 	bl	8000e1c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0d7      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cca:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ee      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x368>
 8001cd6:	e014      	b.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f8a0 	bl	8000e1c <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f89c 	bl	8000e1c <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0c1      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1ee      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d02:	7dfb      	ldrb	r3, [r7, #23]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d08:	4b3b      	ldr	r3, [pc, #236]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0c:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80ad 	beq.w	8001e78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d060      	beq.n	8001dec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d145      	bne.n	8001dbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b33      	ldr	r3, [pc, #204]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff f870 	bl	8000e1c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff f86c 	bl	8000e1c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e093      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b29      	ldr	r3, [pc, #164]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69da      	ldr	r2, [r3, #28]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	019b      	lsls	r3, r3, #6
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	085b      	lsrs	r3, r3, #1
 8001d76:	3b01      	subs	r3, #1
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	061b      	lsls	r3, r3, #24
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	071b      	lsls	r3, r3, #28
 8001d8a:	491b      	ldr	r1, [pc, #108]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d96:	f7ff f841 	bl	8000e1c <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7ff f83d 	bl	8000e1c <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e064      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x452>
 8001dbc:	e05c      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_RCC_OscConfig+0x4b4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f82a 	bl	8000e1c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f826 	bl	8000e1c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e04d      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x480>
 8001dea:	e045      	b.n	8001e78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e040      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	40007000 	.word	0x40007000
 8001e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCC_OscConfig+0x538>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d030      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d129      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d122      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d119      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	085b      	lsrs	r3, r3, #1
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d10f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e041      	b.n	8001f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fe7e 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3304      	adds	r3, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f000 fc70 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d001      	beq.n	8001f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e04e      	b.n	8001fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_Base_Start_IT+0xc4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d022      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d018      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d013      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00e      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a19      	ldr	r2, [pc, #100]	; (8002000 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d004      	beq.n	8001fa8 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a18      	ldr	r2, [pc, #96]	; (8002004 <HAL_TIM_Base_Start_IT+0xdc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d111      	bne.n	8001fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f042 0201 	orr.w	r2, r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	e007      	b.n	8001fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40010000 	.word	0x40010000
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000800 	.word	0x40000800
 8001ff8:	40000c00 	.word	0x40000c00
 8001ffc:	40010400 	.word	0x40010400
 8002000:	40014000 	.word	0x40014000
 8002004:	40001800 	.word	0x40001800

08002008 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e041      	b.n	800209e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d106      	bne.n	8002034 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7fe fd9e 	bl	8000b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3304      	adds	r3, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f000 fbb0 	bl	80027ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_TIM_PWM_Start+0x24>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	bf14      	ite	ne
 80020c4:	2301      	movne	r3, #1
 80020c6:	2300      	moveq	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e022      	b.n	8002112 <HAL_TIM_PWM_Start+0x6a>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d109      	bne.n	80020e6 <HAL_TIM_PWM_Start+0x3e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	e015      	b.n	8002112 <HAL_TIM_PWM_Start+0x6a>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d109      	bne.n	8002100 <HAL_TIM_PWM_Start+0x58>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e008      	b.n	8002112 <HAL_TIM_PWM_Start+0x6a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e07c      	b.n	8002214 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d104      	bne.n	800212a <HAL_TIM_PWM_Start+0x82>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002128:	e013      	b.n	8002152 <HAL_TIM_PWM_Start+0xaa>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b04      	cmp	r3, #4
 800212e:	d104      	bne.n	800213a <HAL_TIM_PWM_Start+0x92>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002138:	e00b      	b.n	8002152 <HAL_TIM_PWM_Start+0xaa>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d104      	bne.n	800214a <HAL_TIM_PWM_Start+0xa2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2202      	movs	r2, #2
 8002144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002148:	e003      	b.n	8002152 <HAL_TIM_PWM_Start+0xaa>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f000 fe10 	bl	8002d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <HAL_TIM_PWM_Start+0x174>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d004      	beq.n	8002174 <HAL_TIM_PWM_Start+0xcc>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <HAL_TIM_PWM_Start+0x178>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_TIM_PWM_Start+0xd0>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <HAL_TIM_PWM_Start+0xd2>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d007      	beq.n	800218e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a22      	ldr	r2, [pc, #136]	; (800221c <HAL_TIM_PWM_Start+0x174>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d022      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a0:	d01d      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_TIM_PWM_Start+0x17c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d018      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_TIM_PWM_Start+0x180>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d013      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_TIM_PWM_Start+0x184>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00e      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_TIM_PWM_Start+0x178>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a18      	ldr	r2, [pc, #96]	; (8002230 <HAL_TIM_PWM_Start+0x188>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_TIM_PWM_Start+0x136>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIM_PWM_Start+0x18c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d111      	bne.n	8002202 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b06      	cmp	r3, #6
 80021ee:	d010      	beq.n	8002212 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002200:	e007      	b.n	8002212 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40010000 	.word	0x40010000
 8002220:	40010400 	.word	0x40010400
 8002224:	40000400 	.word	0x40000400
 8002228:	40000800 	.word	0x40000800
 800222c:	40000c00 	.word	0x40000c00
 8002230:	40014000 	.word	0x40014000
 8002234:	40001800 	.word	0x40001800

08002238 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b02      	cmp	r3, #2
 800224c:	d122      	bne.n	8002294 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b02      	cmp	r3, #2
 800225a:	d11b      	bne.n	8002294 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f06f 0202 	mvn.w	r2, #2
 8002264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa77 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002280:	e005      	b.n	800228e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 fa69 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fa7a 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b04      	cmp	r3, #4
 80022a0:	d122      	bne.n	80022e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	d11b      	bne.n	80022e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0204 	mvn.w	r2, #4
 80022b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2202      	movs	r2, #2
 80022be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fa4d 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 80022d4:	e005      	b.n	80022e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 fa3f 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fa50 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	2b08      	cmp	r3, #8
 80022f4:	d122      	bne.n	800233c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b08      	cmp	r3, #8
 8002302:	d11b      	bne.n	800233c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0208 	mvn.w	r2, #8
 800230c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2204      	movs	r2, #4
 8002312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa23 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002328:	e005      	b.n	8002336 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa15 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 fa26 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f003 0310 	and.w	r3, r3, #16
 8002346:	2b10      	cmp	r3, #16
 8002348:	d122      	bne.n	8002390 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	2b10      	cmp	r3, #16
 8002356:	d11b      	bne.n	8002390 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f06f 0210 	mvn.w	r2, #16
 8002360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2208      	movs	r2, #8
 8002366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f9f9 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 800237c:	e005      	b.n	800238a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f9eb 	bl	800275a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f9fc 	bl	8002782 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b01      	cmp	r3, #1
 800239c:	d10e      	bne.n	80023bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0201 	mvn.w	r2, #1
 80023b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe f8ae 	bl	8000518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b80      	cmp	r3, #128	; 0x80
 80023c8:	d10e      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d4:	2b80      	cmp	r3, #128	; 0x80
 80023d6:	d107      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 fd78 	bl	8002ed8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	2b40      	cmp	r3, #64	; 0x40
 80023f4:	d10e      	bne.n	8002414 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d107      	bne.n	8002414 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800240c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9c1 	bl	8002796 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0320 	and.w	r3, r3, #32
 800241e:	2b20      	cmp	r3, #32
 8002420:	d10e      	bne.n	8002440 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0320 	and.w	r3, r3, #32
 800242c:	2b20      	cmp	r3, #32
 800242e:	d107      	bne.n	8002440 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0220 	mvn.w	r2, #32
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fd42 	bl	8002ec4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800245e:	2b01      	cmp	r3, #1
 8002460:	d101      	bne.n	8002466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002462:	2302      	movs	r3, #2
 8002464:	e0ae      	b.n	80025c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0c      	cmp	r3, #12
 8002472:	f200 809f 	bhi.w	80025b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002476:	a201      	add	r2, pc, #4	; (adr r2, 800247c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247c:	080024b1 	.word	0x080024b1
 8002480:	080025b5 	.word	0x080025b5
 8002484:	080025b5 	.word	0x080025b5
 8002488:	080025b5 	.word	0x080025b5
 800248c:	080024f1 	.word	0x080024f1
 8002490:	080025b5 	.word	0x080025b5
 8002494:	080025b5 	.word	0x080025b5
 8002498:	080025b5 	.word	0x080025b5
 800249c:	08002533 	.word	0x08002533
 80024a0:	080025b5 	.word	0x080025b5
 80024a4:	080025b5 	.word	0x080025b5
 80024a8:	080025b5 	.word	0x080025b5
 80024ac:	08002573 	.word	0x08002573
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa18 	bl	80028ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0208 	orr.w	r2, r2, #8
 80024ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0204 	bic.w	r2, r2, #4
 80024da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6999      	ldr	r1, [r3, #24]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	691a      	ldr	r2, [r3, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	619a      	str	r2, [r3, #24]
      break;
 80024ee:	e064      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fa68 	bl	80029cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	021a      	lsls	r2, r3, #8
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	619a      	str	r2, [r3, #24]
      break;
 8002530:	e043      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	4618      	mov	r0, r3
 800253a:	f000 fabd 	bl	8002ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69da      	ldr	r2, [r3, #28]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f042 0208 	orr.w	r2, r2, #8
 800254c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69da      	ldr	r2, [r3, #28]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0204 	bic.w	r2, r2, #4
 800255c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	69d9      	ldr	r1, [r3, #28]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	61da      	str	r2, [r3, #28]
      break;
 8002570:	e023      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fb11 	bl	8002ba0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800258c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	69da      	ldr	r2, [r3, #28]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	69d9      	ldr	r1, [r3, #28]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	021a      	lsls	r2, r3, #8
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	61da      	str	r2, [r3, #28]
      break;
 80025b2:	e002      	b.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	75fb      	strb	r3, [r7, #23]
      break;
 80025b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_ConfigClockSource+0x1c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0b4      	b.n	8002752 <HAL_TIM_ConfigClockSource+0x186>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800260e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002620:	d03e      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002626:	f200 8087 	bhi.w	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	f000 8086 	beq.w	800273e <HAL_TIM_ConfigClockSource+0x172>
 8002632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002636:	d87f      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002638:	2b70      	cmp	r3, #112	; 0x70
 800263a:	d01a      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0xa6>
 800263c:	2b70      	cmp	r3, #112	; 0x70
 800263e:	d87b      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002640:	2b60      	cmp	r3, #96	; 0x60
 8002642:	d050      	beq.n	80026e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002644:	2b60      	cmp	r3, #96	; 0x60
 8002646:	d877      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002648:	2b50      	cmp	r3, #80	; 0x50
 800264a:	d03c      	beq.n	80026c6 <HAL_TIM_ConfigClockSource+0xfa>
 800264c:	2b50      	cmp	r3, #80	; 0x50
 800264e:	d873      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002650:	2b40      	cmp	r3, #64	; 0x40
 8002652:	d058      	beq.n	8002706 <HAL_TIM_ConfigClockSource+0x13a>
 8002654:	2b40      	cmp	r3, #64	; 0x40
 8002656:	d86f      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002658:	2b30      	cmp	r3, #48	; 0x30
 800265a:	d064      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x15a>
 800265c:	2b30      	cmp	r3, #48	; 0x30
 800265e:	d86b      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	2b20      	cmp	r3, #32
 8002662:	d060      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x15a>
 8002664:	2b20      	cmp	r3, #32
 8002666:	d867      	bhi.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d05c      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x15a>
 800266c:	2b10      	cmp	r3, #16
 800266e:	d05a      	beq.n	8002726 <HAL_TIM_ConfigClockSource+0x15a>
 8002670:	e062      	b.n	8002738 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6899      	ldr	r1, [r3, #8]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f000 fb5d 	bl	8002d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002694:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	609a      	str	r2, [r3, #8]
      break;
 800269e:	e04f      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f000 fb46 	bl	8002d40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026c2:	609a      	str	r2, [r3, #8]
      break;
 80026c4:	e03c      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6818      	ldr	r0, [r3, #0]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	6859      	ldr	r1, [r3, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f000 faba 	bl	8002c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2150      	movs	r1, #80	; 0x50
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fb13 	bl	8002d0a <TIM_ITRx_SetConfig>
      break;
 80026e4:	e02c      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6859      	ldr	r1, [r3, #4]
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	461a      	mov	r2, r3
 80026f4:	f000 fad9 	bl	8002caa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2160      	movs	r1, #96	; 0x60
 80026fe:	4618      	mov	r0, r3
 8002700:	f000 fb03 	bl	8002d0a <TIM_ITRx_SetConfig>
      break;
 8002704:	e01c      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	6859      	ldr	r1, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	461a      	mov	r2, r3
 8002714:	f000 fa9a 	bl	8002c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2140      	movs	r1, #64	; 0x40
 800271e:	4618      	mov	r0, r3
 8002720:	f000 faf3 	bl	8002d0a <TIM_ITRx_SetConfig>
      break;
 8002724:	e00c      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4619      	mov	r1, r3
 8002730:	4610      	mov	r0, r2
 8002732:	f000 faea 	bl	8002d0a <TIM_ITRx_SetConfig>
      break;
 8002736:	e003      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
      break;
 800273c:	e000      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800273e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
	...

080027ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d013      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d00f      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a3d      	ldr	r2, [pc, #244]	; (80028c4 <TIM_Base_SetConfig+0x118>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00b      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3b      	ldr	r2, [pc, #236]	; (80028cc <TIM_Base_SetConfig+0x120>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d003      	beq.n	80027ec <TIM_Base_SetConfig+0x40>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3a      	ldr	r2, [pc, #232]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d108      	bne.n	80027fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a2f      	ldr	r2, [pc, #188]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d027      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a2c      	ldr	r2, [pc, #176]	; (80028c4 <TIM_Base_SetConfig+0x118>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d023      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a2b      	ldr	r2, [pc, #172]	; (80028c8 <TIM_Base_SetConfig+0x11c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01f      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <TIM_Base_SetConfig+0x120>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d017      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a28      	ldr	r2, [pc, #160]	; (80028d4 <TIM_Base_SetConfig+0x128>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <TIM_Base_SetConfig+0x12c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00f      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <TIM_Base_SetConfig+0x130>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <TIM_Base_SetConfig+0x134>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <TIM_Base_SetConfig+0x138>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a23      	ldr	r2, [pc, #140]	; (80028e8 <TIM_Base_SetConfig+0x13c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <TIM_Base_SetConfig+0x114>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d003      	beq.n	80028a4 <TIM_Base_SetConfig+0xf8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a0c      	ldr	r2, [pc, #48]	; (80028d0 <TIM_Base_SetConfig+0x124>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	615a      	str	r2, [r3, #20]
}
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40014400 	.word	0x40014400
 80028dc:	40014800 	.word	0x40014800
 80028e0:	40001800 	.word	0x40001800
 80028e4:	40001c00 	.word	0x40001c00
 80028e8:	40002000 	.word	0x40002000

080028ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b087      	sub	sp, #28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	f023 0201 	bic.w	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f023 0302 	bic.w	r3, r3, #2
 8002934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a20      	ldr	r2, [pc, #128]	; (80029c4 <TIM_OC1_SetConfig+0xd8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d003      	beq.n	8002950 <TIM_OC1_SetConfig+0x64>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a1f      	ldr	r2, [pc, #124]	; (80029c8 <TIM_OC1_SetConfig+0xdc>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d10c      	bne.n	800296a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f023 0308 	bic.w	r3, r3, #8
 8002956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <TIM_OC1_SetConfig+0xd8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d003      	beq.n	800297a <TIM_OC1_SetConfig+0x8e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a14      	ldr	r2, [pc, #80]	; (80029c8 <TIM_OC1_SetConfig+0xdc>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d111      	bne.n	800299e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	621a      	str	r2, [r3, #32]
}
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40010000 	.word	0x40010000
 80029c8:	40010400 	.word	0x40010400

080029cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b087      	sub	sp, #28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0210 	bic.w	r2, r3, #16
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0320 	bic.w	r3, r3, #32
 8002a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <TIM_OC2_SetConfig+0xe4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_OC2_SetConfig+0x68>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	; (8002ab4 <TIM_OC2_SetConfig+0xe8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10d      	bne.n	8002a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <TIM_OC2_SetConfig+0xe4>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_OC2_SetConfig+0x94>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <TIM_OC2_SetConfig+0xe8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d113      	bne.n	8002a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	621a      	str	r2, [r3, #32]
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	40010400 	.word	0x40010400

08002ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0303 	bic.w	r3, r3, #3
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a21      	ldr	r2, [pc, #132]	; (8002b98 <TIM_OC3_SetConfig+0xe0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d003      	beq.n	8002b1e <TIM_OC3_SetConfig+0x66>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a20      	ldr	r2, [pc, #128]	; (8002b9c <TIM_OC3_SetConfig+0xe4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d10d      	bne.n	8002b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a16      	ldr	r2, [pc, #88]	; (8002b98 <TIM_OC3_SetConfig+0xe0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d003      	beq.n	8002b4a <TIM_OC3_SetConfig+0x92>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <TIM_OC3_SetConfig+0xe4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d113      	bne.n	8002b72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	621a      	str	r2, [r3, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	40010400 	.word	0x40010400

08002ba0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	031b      	lsls	r3, r3, #12
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <TIM_OC4_SetConfig+0xa4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d003      	beq.n	8002c08 <TIM_OC4_SetConfig+0x68>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <TIM_OC4_SetConfig+0xa8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d109      	bne.n	8002c1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	621a      	str	r2, [r3, #32]
}
 8002c36:	bf00      	nop
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40010000 	.word	0x40010000
 8002c48:	40010400 	.word	0x40010400

08002c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	f023 0201 	bic.w	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f023 030a 	bic.w	r3, r3, #10
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	621a      	str	r2, [r3, #32]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b087      	sub	sp, #28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0210 	bic.w	r2, r3, #16
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	031b      	lsls	r3, r3, #12
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f043 0307 	orr.w	r3, r3, #7
 8002d2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	021a      	lsls	r2, r3, #8
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	609a      	str	r2, [r3, #8]
}
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2201      	movs	r2, #1
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	43db      	mvns	r3, r3
 8002da2:	401a      	ands	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1a      	ldr	r2, [r3, #32]
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	f003 031f 	and.w	r3, r3, #31
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	fa01 f303 	lsl.w	r3, r1, r3
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	621a      	str	r2, [r3, #32]
}
 8002dbe:	bf00      	nop
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e05a      	b.n	8002e9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d022      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d01d      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d018      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00e      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d004      	beq.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10c      	bne.n	8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40010000 	.word	0x40010000
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40000800 	.word	0x40000800
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40010400 	.word	0x40010400
 8002ebc:	40014000 	.word	0x40014000
 8002ec0:	40001800 	.word	0x40001800

08002ec4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <lcdSendByte>:
 */

#include "lcdController.h"

static void lcdSendByte(LcdController *lcdController, LcdRegisterSelection lcdRs, uint8_t byteToSend)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	70bb      	strb	r3, [r7, #2]
	switch(lcdController->nibble)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	f000 80e3 	beq.w	80030ce <lcdSendByte+0x1e2>
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	f300 81a6 	bgt.w	800325a <lcdSendByte+0x36e>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <lcdSendByte+0x2c>
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d012      	beq.n	8002f3c <lcdSendByte+0x50>
				}
			}
			break;

		default:
			break;
 8002f16:	e1a0      	b.n	800325a <lcdSendByte+0x36e>
			lcdController->highNibbleOfByteToSend = ((byteToSend >> 4) & 0x0F);
 8002f18:	78bb      	ldrb	r3, [r7, #2]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
			lcdController->lowNibbleOfByteToSend = (byteToSend & 0x0F);
 8002f24:	78bb      	ldrb	r3, [r7, #2]
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
			lcdController->nibble = HIGH_NIBBLE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
			break;
 8002f3a:	e193      	b.n	8003264 <lcdSendByte+0x378>
			if(lcdController->entry == 0)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d15c      	bne.n	8003000 <lcdSendByte+0x114>
				HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, lcdRs);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f7fe fa4f 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, WRITE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8002f66:	2200      	movs	r2, #0
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f7fe fa45 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, (lcdController->highNibbleOfByteToSend & 0x08));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8b3 10dc 	ldrh.w	r1, [r3, #220]	; 0xdc
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	f7fe fa36 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, (lcdController->highNibbleOfByteToSend & 0x04));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8b3 10d4 	ldrh.w	r1, [r3, #212]	; 0xd4
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	f7fe fa27 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, (lcdController->highNibbleOfByteToSend & 0x02));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8b3 10cc 	ldrh.w	r1, [r3, #204]	; 0xcc
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	f7fe fa18 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, (lcdController->highNibbleOfByteToSend & 0x01));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f7fe fa09 	bl	80013f8 <HAL_GPIO_WritePin>
				lcdController->entry = 1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				lcdController->delayCounterEnable = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				lcdController->countEnableDelay = TRUE;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8002ffe:	e12e      	b.n	800325e <lcdSendByte+0x372>
			else if(lcdController->entry == 1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d120      	bne.n	800304c <lcdSendByte+0x160>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003010:	2b09      	cmp	r3, #9
 8003012:	f240 8124 	bls.w	800325e <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003032:	2201      	movs	r2, #1
 8003034:	4619      	mov	r1, r3
 8003036:	f7fe f9df 	bl	80013f8 <HAL_GPIO_WritePin>
					lcdController->entry = 2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 800304a:	e108      	b.n	800325e <lcdSendByte+0x372>
			else if(lcdController->entry == 2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003052:	2b02      	cmp	r3, #2
 8003054:	d120      	bne.n	8003098 <lcdSendByte+0x1ac>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800305c:	2b09      	cmp	r3, #9
 800305e:	f240 80fe 	bls.w	800325e <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	f7fe f9b9 	bl	80013f8 <HAL_GPIO_WritePin>
					lcdController->entry = 3;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2203      	movs	r2, #3
 800308a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8003096:	e0e2      	b.n	800325e <lcdSendByte+0x372>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800309e:	2b09      	cmp	r3, #9
 80030a0:	f240 80dd 	bls.w	800325e <lcdSendByte+0x372>
					lcdController->countEnableDelay = FALSE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					lcdController->entry = 0;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->nibble = LOW_NIBBLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2202      	movs	r2, #2
 80030c0:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
					lcdController->byteSended = FALSE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			break;
 80030cc:	e0c7      	b.n	800325e <lcdSendByte+0x372>
			if(lcdController->entry == 0)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d15c      	bne.n	8003192 <lcdSendByte+0x2a6>
				HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, lcdRs);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fe f986 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, WRITE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80030f8:	2200      	movs	r2, #0
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fe f97c 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, (lcdController->lowNibbleOfByteToSend & 0x08));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f8b3 10dc 	ldrh.w	r1, [r3, #220]	; 0xdc
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	b2db      	uxtb	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	f7fe f96d 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, (lcdController->lowNibbleOfByteToSend & 0x04));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b3 10d4 	ldrh.w	r1, [r3, #212]	; 0xd4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	f7fe f95e 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, (lcdController->lowNibbleOfByteToSend & 0x02));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f8b3 10cc 	ldrh.w	r1, [r3, #204]	; 0xcc
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	f7fe f94f 	bl	80013f8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, (lcdController->lowNibbleOfByteToSend & 0x01));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	f7fe f940 	bl	80013f8 <HAL_GPIO_WritePin>
				lcdController->entry = 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				lcdController->delayCounterEnable = 0;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				lcdController->countEnableDelay = TRUE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8003190:	e067      	b.n	8003262 <lcdSendByte+0x376>
			else if(lcdController->entry == 1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d11f      	bne.n	80031dc <lcdSendByte+0x2f0>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d95d      	bls.n	8003262 <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80031c2:	2201      	movs	r2, #1
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7fe f917 	bl	80013f8 <HAL_GPIO_WritePin>
					lcdController->entry = 2;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 80031da:	e042      	b.n	8003262 <lcdSendByte+0x376>
			else if(lcdController->entry == 2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d11f      	bne.n	8003226 <lcdSendByte+0x33a>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ec:	2b09      	cmp	r3, #9
 80031ee:	d938      	bls.n	8003262 <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800320c:	2200      	movs	r2, #0
 800320e:	4619      	mov	r1, r3
 8003210:	f7fe f8f2 	bl	80013f8 <HAL_GPIO_WritePin>
					lcdController->entry = 3;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2203      	movs	r2, #3
 8003218:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->countEnableDelay = TRUE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			break;
 8003224:	e01d      	b.n	8003262 <lcdSendByte+0x376>
				if(lcdController->delayCounterEnable >= DELAY_100_MICRO_SECONDS)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800322c:	2b09      	cmp	r3, #9
 800322e:	d918      	bls.n	8003262 <lcdSendByte+0x376>
					lcdController->countEnableDelay = FALSE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
					lcdController->delayCounterEnable = 0;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					lcdController->entry = 0;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
					lcdController->nibble = DIVISION;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
					lcdController->byteSended = TRUE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			break;
 8003258:	e003      	b.n	8003262 <lcdSendByte+0x376>
			break;
 800325a:	bf00      	nop
 800325c:	e002      	b.n	8003264 <lcdSendByte+0x378>
			break;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <lcdSendByte+0x378>
			break;
 8003262:	bf00      	nop
	}
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <lcdControllerInitStruct>:
		GPIO_TypeDef *db5Port, uint16_t db5Pin,
		GPIO_TypeDef *db6Port, uint16_t db6Pin,
		GPIO_TypeDef *db7Port, uint16_t db7Pin,
		GPIO_TypeDef *onOffPort, uint16_t onOffPin,
		TIM_HandleTypeDef *backlightPwmTimer, uint8_t backlightPwmChannel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	603b      	str	r3, [r7, #0]
 8003278:	4613      	mov	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]
	lcdController->command = COMMAND_0;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	lcdController->backlightPwmTimer = backlightPwmTimer;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	lcdController->backlightPwmChannel = backlightPwmChannel;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8003292:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	lcdController->backlightPercent = BL_00_PERCENT;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
	lcdController->initialized = FALSE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	lcdController->counterAux = 0;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	lcdController->counterUnlock = 0;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	lcdController->counterInitCycles1 = 0;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	lcdController->counterInitCycles2 = 0;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	lcdController->byteToSend = COMMAND;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
	lcdController->updatePosition = FALSE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	lcdController->currentRow = 0;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	lcdController->currentColumm = 0;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
	lcdController->delayCounter = 0;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	lcdController->delayCounterEnable = 0;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	lcdController->entry = 0;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	lcdController->byteSended = FALSE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	lcdController->countDelay = FALSE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	lcdController->countEnableDelay = FALSE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
	lcdController->nibble = DIVISION;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 20a6 	strb.w	r2, [r3, #166]	; 0xa6
	lcdController->rsPort = rsPort;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	lcdController->rsPin = rsPin;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	lcdController->rwPort = rwPort;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	lcdController->rwPin = rwPin;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8b3a      	ldrh	r2, [r7, #24]
 800333a:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	lcdController->enPort = enPort;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	lcdController->enPin = enPin;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8c3a      	ldrh	r2, [r7, #32]
 800334a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	lcdController->db4Port = db4Port;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	lcdController->db4Pin = db4Pin;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800335a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
	lcdController->db5Port = db5Port;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003362:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	lcdController->db5Pin = db5Pin;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800336a:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	lcdController->db6Port = db6Port;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003372:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	lcdController->db6Pin = db6Pin;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800337a:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	lcdController->db7Port = db7Port;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003382:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	lcdController->db7Pin = db7Pin;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800338c:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	lcdController->onOffPort = onOffPort;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003394:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	lcdController->onOffPin = onOffPin;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800339e:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4

	memset((char *) lcdController->stringMatrixBuffer[0], ' ', QTY_OF_CHARS_PER_ROW);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2210      	movs	r2, #16
 80033a6:	2120      	movs	r1, #32
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fe21 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixBuffer[1], ' ', QTY_OF_CHARS_PER_ROW);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	3311      	adds	r3, #17
 80033b2:	2210      	movs	r2, #16
 80033b4:	2120      	movs	r1, #32
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fe1a 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixBuffer[2], ' ', QTY_OF_CHARS_PER_ROW);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3322      	adds	r3, #34	; 0x22
 80033c0:	2210      	movs	r2, #16
 80033c2:	2120      	movs	r1, #32
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fe13 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	3333      	adds	r3, #51	; 0x33
 80033ce:	2210      	movs	r2, #16
 80033d0:	2120      	movs	r1, #32
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fe0c 	bl	8003ff0 <memset>

	memset((char *) lcdController->stringMatrixShow[0], ' ', QTY_OF_CHARS_PER_ROW);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3344      	adds	r3, #68	; 0x44
 80033dc:	2210      	movs	r2, #16
 80033de:	2120      	movs	r1, #32
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fe05 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixShow[1], ' ', QTY_OF_CHARS_PER_ROW);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3355      	adds	r3, #85	; 0x55
 80033ea:	2210      	movs	r2, #16
 80033ec:	2120      	movs	r1, #32
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fdfe 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixShow[2], ' ', QTY_OF_CHARS_PER_ROW);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3366      	adds	r3, #102	; 0x66
 80033f8:	2210      	movs	r2, #16
 80033fa:	2120      	movs	r1, #32
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fdf7 	bl	8003ff0 <memset>
	memset((char *) lcdController->stringMatrixShow[3], ' ', QTY_OF_CHARS_PER_ROW);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	3377      	adds	r3, #119	; 0x77
 8003406:	2210      	movs	r2, #16
 8003408:	2120      	movs	r1, #32
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fdf0 	bl	8003ff0 <memset>
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <lcdControllerInit>:

void lcdControllerInit(LcdController *lcdController)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	lcdControllerSetBacklight(lcdController, BL_00_PERCENT);
 8003420:	2100      	movs	r1, #0
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fc2c 	bl	8003c80 <lcdControllerSetBacklight>
	switch(lcdController->command)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800342e:	2b0d      	cmp	r3, #13
 8003430:	f200 82bf 	bhi.w	80039b2 <lcdControllerInit+0x59a>
 8003434:	a201      	add	r2, pc, #4	; (adr r2, 800343c <lcdControllerInit+0x24>)
 8003436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343a:	bf00      	nop
 800343c:	08003475 	.word	0x08003475
 8003440:	080034ad 	.word	0x080034ad
 8003444:	08003567 	.word	0x08003567
 8003448:	0800364d 	.word	0x0800364d
 800344c:	08003685 	.word	0x08003685
 8003450:	080036d1 	.word	0x080036d1
 8003454:	0800371d 	.word	0x0800371d
 8003458:	0800376d 	.word	0x0800376d
 800345c:	080037b9 	.word	0x080037b9
 8003460:	08003805 	.word	0x08003805
 8003464:	08003851 	.word	0x08003851
 8003468:	080038c7 	.word	0x080038c7
 800346c:	0800390d 	.word	0x0800390d
 8003470:	08003943 	.word	0x08003943
	{
		case COMMAND_0:
			lcdControllerOnOff(lcdController, LCD_OFF);
 8003474:	2101      	movs	r1, #1
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fc38 	bl	8003cec <lcdControllerOnOff>
			lcdController->countDelay = TRUE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800348a:	4ab7      	ldr	r2, [pc, #732]	; (8003768 <lcdControllerInit+0x350>)
 800348c:	4293      	cmp	r3, r2
 800348e:	f240 827b 	bls.w	8003988 <lcdControllerInit+0x570>
			{
				lcdController->countDelay = FALSE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_1;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 80034aa:	e26d      	b.n	8003988 <lcdControllerInit+0x570>

		case COMMAND_1:
			HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_SET);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 80034b8:	2201      	movs	r2, #1
 80034ba:	4619      	mov	r1, r3
 80034bc:	f7fd ff9c 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, GPIO_PIN_RESET);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 80034cc:	2200      	movs	r2, #0
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd ff92 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, GPIO_PIN_RESET);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80034e0:	2200      	movs	r2, #0
 80034e2:	4619      	mov	r1, r3
 80034e4:	f7fd ff88 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, GPIO_PIN_RESET);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 80034f4:	2200      	movs	r2, #0
 80034f6:	4619      	mov	r1, r3
 80034f8:	f7fd ff7e 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, GPIO_PIN_RESET);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 8003508:	2200      	movs	r2, #0
 800350a:	4619      	mov	r1, r3
 800350c:	f7fd ff74 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, GPIO_PIN_RESET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800351c:	2200      	movs	r2, #0
 800351e:	4619      	mov	r1, r3
 8003520:	f7fd ff6a 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, GPIO_PIN_RESET);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003530:	2200      	movs	r2, #0
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd ff60 	bl	80013f8 <HAL_GPIO_WritePin>

			lcdController->countDelay = TRUE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003546:	2b63      	cmp	r3, #99	; 0x63
 8003548:	f240 8220 	bls.w	800398c <lcdControllerInit+0x574>
			{
				lcdController->countDelay = FALSE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2202      	movs	r2, #2
 8003560:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 8003564:	e212      	b.n	800398c <lcdControllerInit+0x574>

		case COMMAND_2:
			HAL_GPIO_WritePin(lcdController->enPort, lcdController->enPin, GPIO_PIN_RESET);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8003572:	2200      	movs	r2, #0
 8003574:	4619      	mov	r1, r3
 8003576:	f7fd ff3f 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rwPort, lcdController->rwPin, GPIO_PIN_RESET);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 8003586:	2200      	movs	r2, #0
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd ff35 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->rsPort, lcdController->rsPin, GPIO_PIN_RESET);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800359a:	2200      	movs	r2, #0
 800359c:	4619      	mov	r1, r3
 800359e:	f7fd ff2b 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db7Port, lcdController->db7Pin, GPIO_PIN_RESET);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 00d8 	ldr.w	r0, [r3, #216]	; 0xd8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8b3 30dc 	ldrh.w	r3, [r3, #220]	; 0xdc
 80035ae:	2200      	movs	r2, #0
 80035b0:	4619      	mov	r1, r3
 80035b2:	f7fd ff21 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db6Port, lcdController->db6Pin, GPIO_PIN_RESET);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	; 0xd4
 80035c2:	2200      	movs	r2, #0
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7fd ff17 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db5Port, lcdController->db5Pin, GPIO_PIN_RESET);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 80035d6:	2200      	movs	r2, #0
 80035d8:	4619      	mov	r1, r3
 80035da:	f7fd ff0d 	bl	80013f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(lcdController->db4Port, lcdController->db4Pin, GPIO_PIN_RESET);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	f7fd ff03 	bl	80013f8 <HAL_GPIO_WritePin>

			lcdController->countDelay = TRUE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003600:	2b63      	cmp	r3, #99	; 0x63
 8003602:	f240 81c5 	bls.w	8003990 <lcdControllerInit+0x578>
			{
				lcdController->countDelay = FALSE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->counterUnlock++;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800361c:	3301      	adds	r3, #1
 800361e:	b2da      	uxtb	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
				if(lcdController->counterUnlock < 16)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800362c:	2b0f      	cmp	r3, #15
 800362e:	d804      	bhi.n	800363a <lcdControllerInit+0x222>
				{
					lcdController->command = COMMAND_1;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				{
					lcdController->command = COMMAND_3;
					lcdController->counterUnlock = 0;
				}
			}
			break;
 8003638:	e1aa      	b.n	8003990 <lcdControllerInit+0x578>
					lcdController->command = COMMAND_3;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2203      	movs	r2, #3
 800363e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->counterUnlock = 0;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
			break;
 800364a:	e1a1      	b.n	8003990 <lcdControllerInit+0x578>

		case COMMAND_3:
			lcdControllerOnOff(lcdController, LCD_ON);
 800364c:	2100      	movs	r1, #0
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fb4c 	bl	8003cec <lcdControllerOnOff>
			lcdController->countDelay = TRUE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003662:	4a41      	ldr	r2, [pc, #260]	; (8003768 <lcdControllerInit+0x350>)
 8003664:	4293      	cmp	r3, r2
 8003666:	f240 8195 	bls.w	8003994 <lcdControllerInit+0x57c>
			{
				lcdController->countDelay = FALSE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_4;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2204      	movs	r2, #4
 800367e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			break;
 8003682:	e187      	b.n	8003994 <lcdControllerInit+0x57c>

		case COMMAND_4:
			if(lcdController->byteSended == TRUE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d11a      	bne.n	80036c4 <lcdControllerInit+0x2ac>
			{
				lcdController->countDelay = TRUE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369c:	2b63      	cmp	r3, #99	; 0x63
 800369e:	f240 817b 	bls.w	8003998 <lcdControllerInit+0x580>
				{
					lcdController->countDelay = FALSE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_5;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2205      	movs	r2, #5
 80036b6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, FUNCTION_SET_4BIT_MULTILINE_5X8DOTS);
			}
			break;
 80036c2:	e169      	b.n	8003998 <lcdControllerInit+0x580>
				lcdSendByte(lcdController, COMMAND, FUNCTION_SET_4BIT_MULTILINE_5X8DOTS);
 80036c4:	2228      	movs	r2, #40	; 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fc0f 	bl	8002eec <lcdSendByte>
			break;
 80036ce:	e163      	b.n	8003998 <lcdControllerInit+0x580>

		case COMMAND_5:
			if(lcdController->byteSended == TRUE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d11a      	bne.n	8003710 <lcdControllerInit+0x2f8>
			{
				lcdController->countDelay = TRUE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036e8:	2b63      	cmp	r3, #99	; 0x63
 80036ea:	f240 8157 	bls.w	800399c <lcdControllerInit+0x584>
				{
					lcdController->countDelay = FALSE;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_6;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2206      	movs	r2, #6
 8003702:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, CURSOR_OR_DISPLAY_SHIFT_SHIFTCURSORTOTHERIGHT);
			}
			break;
 800370e:	e145      	b.n	800399c <lcdControllerInit+0x584>
				lcdSendByte(lcdController, COMMAND, CURSOR_OR_DISPLAY_SHIFT_SHIFTCURSORTOTHERIGHT);
 8003710:	2214      	movs	r2, #20
 8003712:	2100      	movs	r1, #0
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff fbe9 	bl	8002eec <lcdSendByte>
			break;
 800371a:	e13f      	b.n	800399c <lcdControllerInit+0x584>

		case COMMAND_6:
			if(lcdController->byteSended == TRUE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d11a      	bne.n	800375c <lcdControllerInit+0x344>
			{
				lcdController->countDelay = TRUE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_2500_MICRO_SECONDS)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003734:	2bf9      	cmp	r3, #249	; 0xf9
 8003736:	f240 8133 	bls.w	80039a0 <lcdControllerInit+0x588>
				{
					lcdController->countDelay = FALSE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_7;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2207      	movs	r2, #7
 800374e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, CLEAR_DISPLAY);
			}
			break;
 800375a:	e121      	b.n	80039a0 <lcdControllerInit+0x588>
				lcdSendByte(lcdController, COMMAND, CLEAR_DISPLAY);
 800375c:	2201      	movs	r2, #1
 800375e:	2100      	movs	r1, #0
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fbc3 	bl	8002eec <lcdSendByte>
			break;
 8003766:	e11b      	b.n	80039a0 <lcdControllerInit+0x588>
 8003768:	00030d3f 	.word	0x00030d3f

		case COMMAND_7:
			if(lcdController->byteSended == TRUE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11a      	bne.n	80037ac <lcdControllerInit+0x394>
			{
				lcdController->countDelay = TRUE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_2500_MICRO_SECONDS)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003784:	2bf9      	cmp	r3, #249	; 0xf9
 8003786:	f240 810d 	bls.w	80039a4 <lcdControllerInit+0x58c>
				{
					lcdController->countDelay = FALSE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_8;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2208      	movs	r2, #8
 800379e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, RETURN_HOME);
			}
			break;
 80037aa:	e0fb      	b.n	80039a4 <lcdControllerInit+0x58c>
				lcdSendByte(lcdController, COMMAND, RETURN_HOME);
 80037ac:	2202      	movs	r2, #2
 80037ae:	2100      	movs	r1, #0
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff fb9b 	bl	8002eec <lcdSendByte>
			break;
 80037b6:	e0f5      	b.n	80039a4 <lcdControllerInit+0x58c>

		case COMMAND_8:
			if(lcdController->byteSended == TRUE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d11a      	bne.n	80037f8 <lcdControllerInit+0x3e0>
			{
				lcdController->countDelay = TRUE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037d0:	2b63      	cmp	r3, #99	; 0x63
 80037d2:	f240 80e9 	bls.w	80039a8 <lcdControllerInit+0x590>
				{
					lcdController->countDelay = FALSE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->command = COMMAND_9;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2209      	movs	r2, #9
 80037ea:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
					lcdController->byteSended = FALSE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, ENTRY_MODE_SET_INCREMENT_NOTSHIFT);
			}
			break;
 80037f6:	e0d7      	b.n	80039a8 <lcdControllerInit+0x590>
				lcdSendByte(lcdController, COMMAND, ENTRY_MODE_SET_INCREMENT_NOTSHIFT);
 80037f8:	2206      	movs	r2, #6
 80037fa:	2100      	movs	r1, #0
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fb75 	bl	8002eec <lcdSendByte>
			break;
 8003802:	e0d1      	b.n	80039a8 <lcdControllerInit+0x590>

		case COMMAND_9:
			if(lcdController->byteSended == TRUE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d11a      	bne.n	8003844 <lcdControllerInit+0x42c>
			{
				lcdController->countDelay = TRUE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				if(lcdController->delayCounter >= DELAY_1000_MICRO_SECONDS)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381c:	2b63      	cmp	r3, #99	; 0x63
 800381e:	f240 80c5 	bls.w	80039ac <lcdControllerInit+0x594>
				{
					lcdController->countDelay = FALSE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					lcdController->delayCounter = 0;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
					lcdController->byteSended = FALSE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
					lcdController->command = COMMAND_10;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	220a      	movs	r2, #10
 800383e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			}
			else
			{
				lcdSendByte(lcdController, COMMAND, DISPLAY_ON_OFF_CONTROL_DISPLAYON_CURSOROFF);
			}
			break;
 8003842:	e0b3      	b.n	80039ac <lcdControllerInit+0x594>
				lcdSendByte(lcdController, COMMAND, DISPLAY_ON_OFF_CONTROL_DISPLAYON_CURSOROFF);
 8003844:	220c      	movs	r2, #12
 8003846:	2100      	movs	r1, #0
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff fb4f 	bl	8002eec <lcdSendByte>
			break;
 800384e:	e0ad      	b.n	80039ac <lcdControllerInit+0x594>

		case COMMAND_10:
			if(lcdController->counterAux == 0)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003856:	2b00      	cmp	r3, #0
 8003858:	d118      	bne.n	800388c <lcdControllerInit+0x474>
			{
				lcdControllerSetString(lcdController, ROW_0, (uint8_t *) "################");
 800385a:	4a58      	ldr	r2, [pc, #352]	; (80039bc <lcdControllerInit+0x5a4>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f9b5 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_1, (uint8_t *) "################");
 8003864:	4a55      	ldr	r2, [pc, #340]	; (80039bc <lcdControllerInit+0x5a4>)
 8003866:	21c0      	movs	r1, #192	; 0xc0
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f9b0 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "################");
 800386e:	4a53      	ldr	r2, [pc, #332]	; (80039bc <lcdControllerInit+0x5a4>)
 8003870:	2190      	movs	r1, #144	; 0x90
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9ab 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "################");
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <lcdControllerInit+0x5a4>)
 800387a:	21d0      	movs	r1, #208	; 0xd0
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f9a6 	bl	8003bce <lcdControllerSetString>
				lcdController->counterAux = 1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 800388a:	e017      	b.n	80038bc <lcdControllerInit+0x4a4>
			}
			else
			{
				lcdControllerSetString(lcdController, ROW_0, (uint8_t *) "                ");
 800388c:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <lcdControllerInit+0x5a8>)
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f99c 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_1, (uint8_t *) "                ");
 8003896:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <lcdControllerInit+0x5a8>)
 8003898:	21c0      	movs	r1, #192	; 0xc0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 f997 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "                ");
 80038a0:	4a47      	ldr	r2, [pc, #284]	; (80039c0 <lcdControllerInit+0x5a8>)
 80038a2:	2190      	movs	r1, #144	; 0x90
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f992 	bl	8003bce <lcdControllerSetString>
				lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "                ");
 80038aa:	4a45      	ldr	r2, [pc, #276]	; (80039c0 <lcdControllerInit+0x5a8>)
 80038ac:	21d0      	movs	r1, #208	; 0xd0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f98d 	bl	8003bce <lcdControllerSetString>
				lcdController->counterAux = 0;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			}
			lcdController->command = COMMAND_11;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	220b      	movs	r2, #11
 80038c0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			break;
 80038c4:	e075      	b.n	80039b2 <lcdControllerInit+0x59a>

		case COMMAND_11:
			lcdController->counterInitCycles1++;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			if(lcdController->counterInitCycles1 < 2*(QTY_OF_ROWS * QTY_OF_CHARS_PER_ROW))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	db03      	blt.n	80038ea <lcdControllerInit+0x4d2>
			{
				lcdControllerUpdate(lcdController);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f870 	bl	80039c8 <lcdControllerUpdate>
				lcdController->command = COMMAND_12;
				lcdController->currentRow = 0;
				lcdController->currentColumm = 0;
				lcdController->counterInitCycles1 = 0;
			}
			break;
 80038e8:	e063      	b.n	80039b2 <lcdControllerInit+0x59a>
				lcdController->command = COMMAND_12;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	220c      	movs	r2, #12
 80038ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->currentRow = 0;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
				lcdController->currentColumm = 0;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
				lcdController->counterInitCycles1 = 0;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			break;
 800390a:	e052      	b.n	80039b2 <lcdControllerInit+0x59a>

		case COMMAND_12:
			lcdController->counterInitCycles2++;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003912:	3301      	adds	r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			if(lcdController->counterInitCycles2 > 1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003922:	2b01      	cmp	r3, #1
 8003924:	d908      	bls.n	8003938 <lcdControllerInit+0x520>
			{
				lcdController->command = COMMAND_13;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	220d      	movs	r2, #13
 800392a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->counterInitCycles2 = 0;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
			}
			else
			{
				lcdController->command = COMMAND_4;
			}
			break;
 8003936:	e03c      	b.n	80039b2 <lcdControllerInit+0x59a>
				lcdController->command = COMMAND_4;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2204      	movs	r2, #4
 800393c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
			break;
 8003940:	e037      	b.n	80039b2 <lcdControllerInit+0x59a>

		case COMMAND_13:
			lcdController->countDelay = TRUE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
			if(lcdController->delayCounter >= DELAY_2000000_MICRO_SECONDS)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <lcdControllerInit+0x5ac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d92c      	bls.n	80039b0 <lcdControllerInit+0x598>
			{
				lcdController->countDelay = FALSE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
				lcdController->delayCounter = 0;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				lcdController->command = COMMAND_0;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
				lcdController->initialized = TRUE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
				lcdController->byteToSend = COMMAND;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
				lcdControllerSetBacklight(lcdController, BL_60_PERCENT);
 800397e:	211e      	movs	r1, #30
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f97d 	bl	8003c80 <lcdControllerSetBacklight>
			}
			break;
 8003986:	e013      	b.n	80039b0 <lcdControllerInit+0x598>
			break;
 8003988:	bf00      	nop
 800398a:	e012      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 800398c:	bf00      	nop
 800398e:	e010      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 8003990:	bf00      	nop
 8003992:	e00e      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 8003994:	bf00      	nop
 8003996:	e00c      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 8003998:	bf00      	nop
 800399a:	e00a      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 800399c:	bf00      	nop
 800399e:	e008      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 80039a0:	bf00      	nop
 80039a2:	e006      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 80039a4:	bf00      	nop
 80039a6:	e004      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <lcdControllerInit+0x59a>
			break;
 80039b0:	bf00      	nop
	}
}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08004040 	.word	0x08004040
 80039c0:	08004054 	.word	0x08004054
 80039c4:	00030d3f 	.word	0x00030d3f

080039c8 <lcdControllerUpdate>:

void lcdControllerUpdate(LcdController *lcdController)
{
 80039c8:	b5b0      	push	{r4, r5, r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	uint8_t currentCharInDisplay = lcdController->stringMatrixShow[lcdController->currentRow][lcdController->currentColumm];
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80039d6:	4619      	mov	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80039de:	4618      	mov	r0, r3
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	440b      	add	r3, r1
 80039e8:	4413      	add	r3, r2
 80039ea:	4403      	add	r3, r0
 80039ec:	3344      	adds	r3, #68	; 0x44
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	73bb      	strb	r3, [r7, #14]
	uint8_t newCharToDisplay = lcdController->stringMatrixBuffer[lcdController->currentRow][lcdController->currentColumm];
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80039f8:	4619      	mov	r1, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a00:	4618      	mov	r0, r3
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	440b      	add	r3, r1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	737b      	strb	r3, [r7, #13]
	uint8_t position = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]

	if(currentCharInDisplay != newCharToDisplay)
 8003a16:	7bba      	ldrb	r2, [r7, #14]
 8003a18:	7b7b      	ldrb	r3, [r7, #13]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d02f      	beq.n	8003a7e <lcdControllerUpdate+0xb6>
	{
		lcdController->updatePosition = TRUE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

		if(lcdController->currentRow == 0)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <lcdControllerUpdate+0x74>
		{
			position = ROW_0 + lcdController->currentColumm;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a36:	3b80      	subs	r3, #128	; 0x80
 8003a38:	73fb      	strb	r3, [r7, #15]
 8003a3a:	e042      	b.n	8003ac2 <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d105      	bne.n	8003a52 <lcdControllerUpdate+0x8a>
		{
			position = ROW_1 + lcdController->currentColumm;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a4c:	3b40      	subs	r3, #64	; 0x40
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e037      	b.n	8003ac2 <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d105      	bne.n	8003a68 <lcdControllerUpdate+0xa0>
		{
			position = ROW_2 + lcdController->currentColumm;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a62:	3b70      	subs	r3, #112	; 0x70
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e02c      	b.n	8003ac2 <lcdControllerUpdate+0xfa>
		}
		else if(lcdController->currentRow == 3)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d127      	bne.n	8003ac2 <lcdControllerUpdate+0xfa>
		{
			position = ROW_3 + lcdController->currentColumm;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a78:	3b30      	subs	r3, #48	; 0x30
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e021      	b.n	8003ac2 <lcdControllerUpdate+0xfa>
		}
	}
	else
	{
		lcdController->currentColumm++;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a84:	3301      	adds	r3, #1
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
		if(lcdController->currentColumm > QTY_OF_CHARS_PER_ROW-1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003a94:	2b0f      	cmp	r3, #15
 8003a96:	d914      	bls.n	8003ac2 <lcdControllerUpdate+0xfa>
		{
			lcdController->currentColumm = 0;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
			lcdController->currentRow++;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			if(lcdController->currentRow > QTY_OF_ROWS-1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d903      	bls.n	8003ac2 <lcdControllerUpdate+0xfa>
			{
				lcdController->currentRow = 0;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			}
		}
	}

	if (lcdController->updatePosition == TRUE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d177      	bne.n	8003bbc <lcdControllerUpdate+0x1f4>
	{
		switch (lcdController->byteToSend)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <lcdControllerUpdate+0x114>
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d026      	beq.n	8003b28 <lcdControllerUpdate+0x160>
					lcdSendByte(lcdController, DATA, newCharToDisplay);
				}
				break;

			default:
				break;
 8003ada:	e074      	b.n	8003bc6 <lcdControllerUpdate+0x1fe>
				if(lcdController->byteSended == TRUE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d119      	bne.n	8003b1a <lcdControllerUpdate+0x152>
					lcdController->countDelay = TRUE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					if(lcdController->delayCounter >= DELAY_100_MICRO_SECONDS)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af4:	2b09      	cmp	r3, #9
 8003af6:	d963      	bls.n	8003bc0 <lcdControllerUpdate+0x1f8>
						lcdController->countDelay = FALSE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
						lcdController->delayCounter = 0;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
						lcdController->byteSended = FALSE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
						lcdController->byteToSend = DATA;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
				break;
 8003b18:	e052      	b.n	8003bc0 <lcdControllerUpdate+0x1f8>
					lcdSendByte(lcdController, COMMAND, position);
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	2100      	movs	r1, #0
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff f9e3 	bl	8002eec <lcdSendByte>
				break;
 8003b26:	e04b      	b.n	8003bc0 <lcdControllerUpdate+0x1f8>
				if(lcdController->byteSended == TRUE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d13d      	bne.n	8003bae <lcdControllerUpdate+0x1e6>
					lcdController->countDelay = TRUE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
					if(lcdController->delayCounter >= DELAY_100_MICRO_SECONDS)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b40:	2b09      	cmp	r3, #9
 8003b42:	d93f      	bls.n	8003bc4 <lcdControllerUpdate+0x1fc>
						lcdController->countDelay = FALSE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
						lcdController->delayCounter = 0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
						lcdController->byteSended = FALSE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
						lcdController->byteToSend = COMMAND;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
						lcdController->updatePosition = FALSE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
						lcdController->stringMatrixShow[lcdController->currentRow][lcdController->currentColumm] = lcdController->stringMatrixBuffer[lcdController->currentRow][lcdController->currentColumm];
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003b72:	4618      	mov	r0, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003b7a:	461d      	mov	r5, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8003b82:	4619      	mov	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4603      	mov	r3, r0
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4403      	add	r3, r0
 8003b94:	4413      	add	r3, r2
 8003b96:	442b      	add	r3, r5
 8003b98:	7818      	ldrb	r0, [r3, #0]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	440b      	add	r3, r1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	4423      	add	r3, r4
 8003ba6:	3344      	adds	r3, #68	; 0x44
 8003ba8:	4602      	mov	r2, r0
 8003baa:	701a      	strb	r2, [r3, #0]
				break;
 8003bac:	e00a      	b.n	8003bc4 <lcdControllerUpdate+0x1fc>
					lcdSendByte(lcdController, DATA, newCharToDisplay);
 8003bae:	7b7b      	ldrb	r3, [r7, #13]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff f999 	bl	8002eec <lcdSendByte>
				break;
 8003bba:	e003      	b.n	8003bc4 <lcdControllerUpdate+0x1fc>
		}
	}
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <lcdControllerUpdate+0x1fe>
				break;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <lcdControllerUpdate+0x1fe>
				break;
 8003bc4:	bf00      	nop
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bdb0      	pop	{r4, r5, r7, pc}

08003bce <lcdControllerSetString>:

void lcdControllerSetString(LcdController *lcdController, LcdRow lcdRow, uint8_t *string)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	72fb      	strb	r3, [r7, #11]
	uint8_t stringLength = strlen((char *) string);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fc fb11 	bl	8000204 <strlen>
 8003be2:	4603      	mov	r3, r0
 8003be4:	75fb      	strb	r3, [r7, #23]
	switch (lcdRow)
 8003be6:	7afb      	ldrb	r3, [r7, #11]
 8003be8:	2bd0      	cmp	r3, #208	; 0xd0
 8003bea:	d035      	beq.n	8003c58 <lcdControllerSetString+0x8a>
 8003bec:	2bd0      	cmp	r3, #208	; 0xd0
 8003bee:	dc42      	bgt.n	8003c76 <lcdControllerSetString+0xa8>
 8003bf0:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf2:	d013      	beq.n	8003c1c <lcdControllerSetString+0x4e>
 8003bf4:	2bc0      	cmp	r3, #192	; 0xc0
 8003bf6:	dc3e      	bgt.n	8003c76 <lcdControllerSetString+0xa8>
 8003bf8:	2b80      	cmp	r3, #128	; 0x80
 8003bfa:	d002      	beq.n	8003c02 <lcdControllerSetString+0x34>
 8003bfc:	2b90      	cmp	r3, #144	; 0x90
 8003bfe:	d01c      	beq.n	8003c3a <lcdControllerSetString+0x6c>
			memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
			strncpy((char *) lcdController->stringMatrixBuffer[3], (char *) string, stringLength);
			break;

		default:
			break;
 8003c00:	e039      	b.n	8003c76 <lcdControllerSetString+0xa8>
			memset((char *) lcdController->stringMatrixBuffer[0], ' ', QTY_OF_CHARS_PER_ROW);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2210      	movs	r2, #16
 8003c06:	2120      	movs	r1, #32
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f9f1 	bl	8003ff0 <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[0], (char *) string, stringLength);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	7dfa      	ldrb	r2, [r7, #23]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f9f3 	bl	8004000 <strncpy>
			break;
 8003c1a:	e02d      	b.n	8003c78 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[1], ' ', QTY_OF_CHARS_PER_ROW);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3311      	adds	r3, #17
 8003c20:	2210      	movs	r2, #16
 8003c22:	2120      	movs	r1, #32
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f9e3 	bl	8003ff0 <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[1], (char *) string, stringLength);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	3311      	adds	r3, #17
 8003c2e:	7dfa      	ldrb	r2, [r7, #23]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f9e4 	bl	8004000 <strncpy>
			break;
 8003c38:	e01e      	b.n	8003c78 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[2], ' ', QTY_OF_CHARS_PER_ROW);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3322      	adds	r3, #34	; 0x22
 8003c3e:	2210      	movs	r2, #16
 8003c40:	2120      	movs	r1, #32
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9d4 	bl	8003ff0 <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[2], (char *) string, stringLength);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3322      	adds	r3, #34	; 0x22
 8003c4c:	7dfa      	ldrb	r2, [r7, #23]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 f9d5 	bl	8004000 <strncpy>
			break;
 8003c56:	e00f      	b.n	8003c78 <lcdControllerSetString+0xaa>
			memset((char *) lcdController->stringMatrixBuffer[3], ' ', QTY_OF_CHARS_PER_ROW);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	3333      	adds	r3, #51	; 0x33
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	2120      	movs	r1, #32
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f9c5 	bl	8003ff0 <memset>
			strncpy((char *) lcdController->stringMatrixBuffer[3], (char *) string, stringLength);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3333      	adds	r3, #51	; 0x33
 8003c6a:	7dfa      	ldrb	r2, [r7, #23]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f9c6 	bl	8004000 <strncpy>
			break;
 8003c74:	e000      	b.n	8003c78 <lcdControllerSetString+0xaa>
			break;
 8003c76:	bf00      	nop
	}
}
 8003c78:	bf00      	nop
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <lcdControllerSetBacklight>:

void lcdControllerSetBacklight(LcdController *lcdController, BacklightPercent backlightPercent)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <lcdControllerSetBacklight+0x24>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ca2:	e01d      	b.n	8003ce0 <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d106      	bne.n	8003cbc <lcdControllerSetBacklight+0x3c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003cba:	e011      	b.n	8003ce0 <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d106      	bne.n	8003cd4 <lcdControllerSetBacklight+0x54>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003cd2:	e005      	b.n	8003ce0 <lcdControllerSetBacklight+0x60>
	__HAL_TIM_SET_COMPARE(lcdController->backlightPwmTimer, lcdController->backlightPwmChannel, backlightPercent);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <lcdControllerOnOff>:

void lcdControllerOnOff(LcdController *lcdController, LcdOnOff lcdOnOff)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcdController->onOffPort, lcdController->onOffPin, lcdOnOff);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8b3 30e4 	ldrh.w	r3, [r3, #228]	; 0xe4
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fd fb76 	bl	80013f8 <HAL_GPIO_WritePin>
}
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <lcdControllerGetDelayStatus>:
	lcdControllerSetString(lcdController, ROW_2, (uint8_t *) "                ");
	lcdControllerSetString(lcdController, ROW_3, (uint8_t *) "                ");
}

Bool lcdControllerGetDelayStatus(LcdController *lcdController)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	return lcdController->countDelay;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <lcdControllerIncrementDelayCounter>:

void lcdControllerIncrementDelayCounter(LcdController *lcdController)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
	lcdController->delayCounter++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <lcdControllerGetEnableDelayStatus>:

Bool lcdControllerGetEnableDelayStatus(LcdController *lcdController)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	return lcdController->countEnableDelay;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <lcdControllerIncrementEnableDelayCounter>:

void lcdControllerIncrementEnableDelayCounter(LcdController *lcdController)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
	lcdController->delayCounterEnable++;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d78:	1c5a      	adds	r2, r3, #1
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <lcdControllerIsInitialized>:

Bool lcdControllerIsInitialized(LcdController *lcdController)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	return lcdController->initialized;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <pushButtonInit>:
 */

#include "pushButton.h"

void pushButtonInit(PushButton *pushButton, GPIO_TypeDef *pushButtonPort, uint16_t pushButtonPin, UnpressedState unpressedState, uint16_t debounceTimeSinglePressCounter, uint16_t debounceTimeContinuousPressCounter)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	60b9      	str	r1, [r7, #8]
 8003db0:	4611      	mov	r1, r2
 8003db2:	461a      	mov	r2, r3
 8003db4:	460b      	mov	r3, r1
 8003db6:	80fb      	strh	r3, [r7, #6]
 8003db8:	4613      	mov	r3, r2
 8003dba:	717b      	strb	r3, [r7, #5]
	pushButton->port = pushButtonPort;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	601a      	str	r2, [r3, #0]
	pushButton->pin = pushButtonPin;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	809a      	strh	r2, [r3, #4]
	pushButton->unpressedState = unpressedState;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	797a      	ldrb	r2, [r7, #5]
 8003dcc:	719a      	strb	r2, [r3, #6]
	pushButton->pressState = UNPRESSED;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	71da      	strb	r2, [r3, #7]
	pushButton->timeSinglePressCounter = 0;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	811a      	strh	r2, [r3, #8]
	pushButton->timeContinuousPressCounter = 0;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	815a      	strh	r2, [r3, #10]
	pushButton->continuousPressedCounter = 0;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	821a      	strh	r2, [r3, #16]
	pushButton->debounceTimeSinglePressCounter = debounceTimeSinglePressCounter;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8b3a      	ldrh	r2, [r7, #24]
 8003dea:	819a      	strh	r2, [r3, #12]
	pushButton->debounceTimeContinuousPressCounter = debounceTimeContinuousPressCounter;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8bba      	ldrh	r2, [r7, #28]
 8003df0:	81da      	strh	r2, [r3, #14]

	if(pushButton->debounceTimeSinglePressCounter < MIN_PRESSED_COUNTER)
	{
		pushButton->debounceTimeSinglePressCounter = MIN_PRESSED_COUNTER;
	}
	else if(pushButton->debounceTimeSinglePressCounter > MAX_PRESSED_COUNTER)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	899b      	ldrh	r3, [r3, #12]
 8003df6:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d903      	bls.n	8003e06 <pushButtonInit+0x60>
	{
		pushButton->debounceTimeSinglePressCounter = MAX_PRESSED_COUNTER;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003e04:	819a      	strh	r2, [r3, #12]

	if(pushButton->debounceTimeContinuousPressCounter < MIN_PRESSED_COUNTER)
	{
		pushButton->debounceTimeContinuousPressCounter = MIN_PRESSED_COUNTER;
	}
	else if(pushButton->debounceTimeContinuousPressCounter > MAX_PRESSED_COUNTER)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	89db      	ldrh	r3, [r3, #14]
 8003e0a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d903      	bls.n	8003e1a <pushButtonInit+0x74>
	{
		pushButton->debounceTimeContinuousPressCounter = MAX_PRESSED_COUNTER;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003e18:	81da      	strh	r2, [r3, #14]
	}
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <pushButtonReadSinglePressInRelease>:

PressState pushButtonReadSinglePressInRelease(PushButton *pushButton)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b084      	sub	sp, #16
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	GPIO_PinState currentPushButtonPinState = HAL_GPIO_ReadPin(pushButton->port, pushButton->pin);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	889b      	ldrh	r3, [r3, #4]
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f7fd fac5 	bl	80013c8 <HAL_GPIO_ReadPin>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	73fb      	strb	r3, [r7, #15]

	if((uint8_t) currentPushButtonPinState == (uint8_t) pushButton->unpressedState)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	799b      	ldrb	r3, [r3, #6]
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d115      	bne.n	8003e78 <pushButtonReadSinglePressInRelease+0x52>
	{
		if(pushButton->timeSinglePressCounter >= pushButton->debounceTimeSinglePressCounter)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	891a      	ldrh	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	899b      	ldrh	r3, [r3, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d307      	bcc.n	8003e68 <pushButtonReadSinglePressInRelease+0x42>
		{
			pushButton->timeSinglePressCounter = MIN_PRESSED_COUNTER;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	811a      	strh	r2, [r3, #8]
			pushButton->pressState = PRESSED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	71da      	strb	r2, [r3, #7]
			return PRESSED;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e01b      	b.n	8003ea0 <pushButtonReadSinglePressInRelease+0x7a>
		}

		pushButton->timeSinglePressCounter = MIN_PRESSED_COUNTER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	811a      	strh	r2, [r3, #8]
		pushButton->pressState = UNPRESSED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	71da      	strb	r2, [r3, #7]
		return UNPRESSED;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e013      	b.n	8003ea0 <pushButtonReadSinglePressInRelease+0x7a>
	}

	pushButton->timeSinglePressCounter += 1;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	891b      	ldrh	r3, [r3, #8]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	811a      	strh	r2, [r3, #8]
	if(pushButton->timeSinglePressCounter < MIN_PRESSED_COUNTER)
	{
		pushButton->timeSinglePressCounter = MIN_PRESSED_COUNTER;
	}
	else if(pushButton->timeSinglePressCounter > MAX_PRESSED_COUNTER)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	891b      	ldrh	r3, [r3, #8]
 8003e88:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d903      	bls.n	8003e98 <pushButtonReadSinglePressInRelease+0x72>
	{
		pushButton->timeSinglePressCounter = MAX_PRESSED_COUNTER;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003e96:	811a      	strh	r2, [r3, #8]
	}

	pushButton->pressState = UNPRESSED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	71da      	strb	r2, [r3, #7]
	return UNPRESSED;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <pushButtonReadContinuousPress>:

PressState pushButtonReadContinuousPress(PushButton *pushButton)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
	GPIO_PinState currentPushButtonPinState = HAL_GPIO_ReadPin(pushButton->port, pushButton->pin);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	889b      	ldrh	r3, [r3, #4]
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fd fa84 	bl	80013c8 <HAL_GPIO_ReadPin>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]

	if((uint8_t) currentPushButtonPinState == (uint8_t) pushButton->unpressedState)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	799b      	ldrb	r3, [r3, #6]
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d10a      	bne.n	8003ee4 <pushButtonReadContinuousPress+0x3c>
	{
		pushButton->continuousPressedCounter = 0;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	821a      	strh	r2, [r3, #16]
		pushButton->timeContinuousPressCounter = MIN_PRESSED_COUNTER;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	815a      	strh	r2, [r3, #10]
		pushButton->pressState = UNPRESSED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	71da      	strb	r2, [r3, #7]
		return UNPRESSED;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	e041      	b.n	8003f68 <pushButtonReadContinuousPress+0xc0>
	}

	if(pushButton->continuousPressedCounter >= 20)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8a1b      	ldrh	r3, [r3, #16]
 8003ee8:	2b13      	cmp	r3, #19
 8003eea:	d906      	bls.n	8003efa <pushButtonReadContinuousPress+0x52>
	{
		pushButton->timeContinuousPressCounter += 4;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	895b      	ldrh	r3, [r3, #10]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	815a      	strh	r2, [r3, #10]
 8003ef8:	e010      	b.n	8003f1c <pushButtonReadContinuousPress+0x74>
	}
	else if(pushButton->continuousPressedCounter >= 10)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8a1b      	ldrh	r3, [r3, #16]
 8003efe:	2b09      	cmp	r3, #9
 8003f00:	d906      	bls.n	8003f10 <pushButtonReadContinuousPress+0x68>
	{
		pushButton->timeContinuousPressCounter += 2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	895b      	ldrh	r3, [r3, #10]
 8003f06:	3302      	adds	r3, #2
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	815a      	strh	r2, [r3, #10]
 8003f0e:	e005      	b.n	8003f1c <pushButtonReadContinuousPress+0x74>
	}
	else
	{
		pushButton->timeContinuousPressCounter += 1;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	895b      	ldrh	r3, [r3, #10]
 8003f14:	3301      	adds	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	815a      	strh	r2, [r3, #10]

	if(pushButton->timeContinuousPressCounter < MIN_PRESSED_COUNTER)
	{
		pushButton->timeContinuousPressCounter = MIN_PRESSED_COUNTER;
	}
	else if(pushButton->timeContinuousPressCounter > MAX_PRESSED_COUNTER)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	895b      	ldrh	r3, [r3, #10]
 8003f20:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d903      	bls.n	8003f30 <pushButtonReadContinuousPress+0x88>
	{
		pushButton->timeContinuousPressCounter = MAX_PRESSED_COUNTER;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003f2e:	815a      	strh	r2, [r3, #10]
	}

	if(pushButton->timeContinuousPressCounter >= pushButton->debounceTimeContinuousPressCounter)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	895a      	ldrh	r2, [r3, #10]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	89db      	ldrh	r3, [r3, #14]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d311      	bcc.n	8003f60 <pushButtonReadContinuousPress+0xb8>
	{
		if(pushButton->continuousPressedCounter < 20)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	8a1b      	ldrh	r3, [r3, #16]
 8003f40:	2b13      	cmp	r3, #19
 8003f42:	d805      	bhi.n	8003f50 <pushButtonReadContinuousPress+0xa8>
		{
			pushButton->continuousPressedCounter++;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	8a1b      	ldrh	r3, [r3, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	821a      	strh	r2, [r3, #16]
		}

		pushButton->timeContinuousPressCounter = MIN_PRESSED_COUNTER;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	815a      	strh	r2, [r3, #10]
		pushButton->pressState = PRESSED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	71da      	strb	r2, [r3, #7]
		return PRESSED;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e003      	b.n	8003f68 <pushButtonReadContinuousPress+0xc0>
	}

	pushButton->pressState = UNPRESSED;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	71da      	strb	r2, [r3, #7]
	return UNPRESSED;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <pushButtonReadSingleAndContinuousPress>:

PressState pushButtonReadSingleAndContinuousPress(PushButton *pushButton)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	PressState pushButtonSinglePressStateInRelease = pushButtonReadSinglePressInRelease(pushButton);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff54 	bl	8003e26 <pushButtonReadSinglePressInRelease>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	73fb      	strb	r3, [r7, #15]
	PressState pushButtonContinuousPressState = pushButtonReadContinuousPress(pushButton);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff90 	bl	8003ea8 <pushButtonReadContinuousPress>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73bb      	strb	r3, [r7, #14]

	return (pushButtonSinglePressStateInRelease || pushButtonContinuousPressState);
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d102      	bne.n	8003f98 <pushButtonReadSingleAndContinuousPress+0x28>
 8003f92:	7bbb      	ldrb	r3, [r7, #14]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <pushButtonReadSingleAndContinuousPress+0x2c>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <pushButtonReadSingleAndContinuousPress+0x2e>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <__libc_init_array>:
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	4d0d      	ldr	r5, [pc, #52]	; (8003fe0 <__libc_init_array+0x38>)
 8003fac:	4c0d      	ldr	r4, [pc, #52]	; (8003fe4 <__libc_init_array+0x3c>)
 8003fae:	1b64      	subs	r4, r4, r5
 8003fb0:	10a4      	asrs	r4, r4, #2
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	42a6      	cmp	r6, r4
 8003fb6:	d109      	bne.n	8003fcc <__libc_init_array+0x24>
 8003fb8:	4d0b      	ldr	r5, [pc, #44]	; (8003fe8 <__libc_init_array+0x40>)
 8003fba:	4c0c      	ldr	r4, [pc, #48]	; (8003fec <__libc_init_array+0x44>)
 8003fbc:	f000 f834 	bl	8004028 <_init>
 8003fc0:	1b64      	subs	r4, r4, r5
 8003fc2:	10a4      	asrs	r4, r4, #2
 8003fc4:	2600      	movs	r6, #0
 8003fc6:	42a6      	cmp	r6, r4
 8003fc8:	d105      	bne.n	8003fd6 <__libc_init_array+0x2e>
 8003fca:	bd70      	pop	{r4, r5, r6, pc}
 8003fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fd0:	4798      	blx	r3
 8003fd2:	3601      	adds	r6, #1
 8003fd4:	e7ee      	b.n	8003fb4 <__libc_init_array+0xc>
 8003fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fda:	4798      	blx	r3
 8003fdc:	3601      	adds	r6, #1
 8003fde:	e7f2      	b.n	8003fc6 <__libc_init_array+0x1e>
 8003fe0:	08004080 	.word	0x08004080
 8003fe4:	08004080 	.word	0x08004080
 8003fe8:	08004080 	.word	0x08004080
 8003fec:	08004084 	.word	0x08004084

08003ff0 <memset>:
 8003ff0:	4402      	add	r2, r0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d100      	bne.n	8003ffa <memset+0xa>
 8003ff8:	4770      	bx	lr
 8003ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8003ffe:	e7f9      	b.n	8003ff4 <memset+0x4>

08004000 <strncpy>:
 8004000:	b510      	push	{r4, lr}
 8004002:	3901      	subs	r1, #1
 8004004:	4603      	mov	r3, r0
 8004006:	b132      	cbz	r2, 8004016 <strncpy+0x16>
 8004008:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800400c:	f803 4b01 	strb.w	r4, [r3], #1
 8004010:	3a01      	subs	r2, #1
 8004012:	2c00      	cmp	r4, #0
 8004014:	d1f7      	bne.n	8004006 <strncpy+0x6>
 8004016:	441a      	add	r2, r3
 8004018:	2100      	movs	r1, #0
 800401a:	4293      	cmp	r3, r2
 800401c:	d100      	bne.n	8004020 <strncpy+0x20>
 800401e:	bd10      	pop	{r4, pc}
 8004020:	f803 1b01 	strb.w	r1, [r3], #1
 8004024:	e7f9      	b.n	800401a <strncpy+0x1a>
	...

08004028 <_init>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	bf00      	nop
 800402c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402e:	bc08      	pop	{r3}
 8004030:	469e      	mov	lr, r3
 8004032:	4770      	bx	lr

08004034 <_fini>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	bf00      	nop
 8004038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403a:	bc08      	pop	{r3}
 800403c:	469e      	mov	lr, r3
 800403e:	4770      	bx	lr
